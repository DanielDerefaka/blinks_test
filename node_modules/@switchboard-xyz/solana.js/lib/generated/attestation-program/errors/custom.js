class GenericError extends Error {
    logs;
    static code = 6000;
    code = 6000;
    name = "GenericError";
    constructor(logs) {
        super("6000: ");
        this.logs = logs;
    }
}
export { GenericError };
class InvalidQuote extends Error {
    logs;
    static code = 6001;
    code = 6001;
    name = "InvalidQuote";
    msg = "The provided enclave quote is invalid";
    constructor(logs) {
        super("6001: The provided enclave quote is invalid");
        this.logs = logs;
    }
}
export { InvalidQuote };
class QuoteExpired extends Error {
    logs;
    static code = 6002;
    code = 6002;
    name = "QuoteExpired";
    msg = "The EnclaveAccount has expired and needs to be reverified";
    constructor(logs) {
        super("6002: The EnclaveAccount has expired and needs to be reverified");
        this.logs = logs;
    }
}
export { QuoteExpired };
class InvalidNode extends Error {
    logs;
    static code = 6003;
    code = 6003;
    name = "InvalidNode";
    constructor(logs) {
        super("6003: ");
        this.logs = logs;
    }
}
export { InvalidNode };
class InsufficientQueue extends Error {
    logs;
    static code = 6004;
    code = 6004;
    name = "InsufficientQueue";
    constructor(logs) {
        super("6004: ");
        this.logs = logs;
    }
}
export { InsufficientQueue };
class QueueFull extends Error {
    logs;
    static code = 6005;
    code = 6005;
    name = "QueueFull";
    msg = "The provided queue is full and cannot support new verifiers";
    constructor(logs) {
        super("6005: The provided queue is full and cannot support new verifiers");
        this.logs = logs;
    }
}
export { QueueFull };
class InvalidEnclaveSigner extends Error {
    logs;
    static code = 6006;
    code = 6006;
    name = "InvalidEnclaveSigner";
    msg = "The provided enclave_signer does not match the expected enclave_signer on the EnclaveAccount";
    constructor(logs) {
        super("6006: The provided enclave_signer does not match the expected enclave_signer on the EnclaveAccount");
        this.logs = logs;
    }
}
export { InvalidEnclaveSigner };
class InvalidSigner extends Error {
    logs;
    static code = 6007;
    code = 6007;
    name = "InvalidSigner";
    constructor(logs) {
        super("6007: ");
        this.logs = logs;
    }
}
export { InvalidSigner };
class MrEnclavesEmpty extends Error {
    logs;
    static code = 6008;
    code = 6008;
    name = "MrEnclavesEmpty";
    msg = "This account has zero mr_enclaves defined";
    constructor(logs) {
        super("6008: This account has zero mr_enclaves defined");
        this.logs = logs;
    }
}
export { MrEnclavesEmpty };
class MrEnclaveAlreadyExists extends Error {
    logs;
    static code = 6009;
    code = 6009;
    name = "MrEnclaveAlreadyExists";
    msg = "The MrEnclave value already exists in the array";
    constructor(logs) {
        super("6009: The MrEnclave value already exists in the array");
        this.logs = logs;
    }
}
export { MrEnclaveAlreadyExists };
class MrEnclaveDoesntExist extends Error {
    logs;
    static code = 6010;
    code = 6010;
    name = "MrEnclaveDoesntExist";
    msg = "The MrEnclave value was not found in the whitelist";
    constructor(logs) {
        super("6010: The MrEnclave value was not found in the whitelist");
        this.logs = logs;
    }
}
export { MrEnclaveDoesntExist };
class MrEnclaveAtCapacity extends Error {
    logs;
    static code = 6011;
    code = 6011;
    name = "MrEnclaveAtCapacity";
    msg = "This account has a full mr_enclaves array. Remove some measurements to make room for new ones";
    constructor(logs) {
        super("6011: This account has a full mr_enclaves array. Remove some measurements to make room for new ones");
        this.logs = logs;
    }
}
export { MrEnclaveAtCapacity };
class PermissionDenied extends Error {
    logs;
    static code = 6012;
    code = 6012;
    name = "PermissionDenied";
    msg = "The PermissionAccount is missing the required flags for this action. Check the queues config to see which permissions are required";
    constructor(logs) {
        super("6012: The PermissionAccount is missing the required flags for this action. Check the queues config to see which permissions are required");
        this.logs = logs;
    }
}
export { PermissionDenied };
class InvalidConstraint extends Error {
    logs;
    static code = 6013;
    code = 6013;
    name = "InvalidConstraint";
    constructor(logs) {
        super("6013: ");
        this.logs = logs;
    }
}
export { InvalidConstraint };
class InvalidTimestamp extends Error {
    logs;
    static code = 6014;
    code = 6014;
    name = "InvalidTimestamp";
    constructor(logs) {
        super("6014: ");
        this.logs = logs;
    }
}
export { InvalidTimestamp };
class InvalidMrEnclave extends Error {
    logs;
    static code = 6015;
    code = 6015;
    name = "InvalidMrEnclave";
    constructor(logs) {
        super("6015: ");
        this.logs = logs;
    }
}
export { InvalidMrEnclave };
class InvalidReportData extends Error {
    logs;
    static code = 6016;
    code = 6016;
    name = "InvalidReportData";
    constructor(logs) {
        super("6016: ");
        this.logs = logs;
    }
}
export { InvalidReportData };
class InsufficientLoadAmount extends Error {
    logs;
    static code = 6017;
    code = 6017;
    name = "InsufficientLoadAmount";
    constructor(logs) {
        super("6017: ");
        this.logs = logs;
    }
}
export { InsufficientLoadAmount };
class IncorrectObservedTime extends Error {
    logs;
    static code = 6018;
    code = 6018;
    name = "IncorrectObservedTime";
    constructor(logs) {
        super("6018: ");
        this.logs = logs;
    }
}
export { IncorrectObservedTime };
class InvalidQuoteMode extends Error {
    logs;
    static code = 6019;
    code = 6019;
    name = "InvalidQuoteMode";
    constructor(logs) {
        super("6019: ");
        this.logs = logs;
    }
}
export { InvalidQuoteMode };
class InvalidVerifierIdx extends Error {
    logs;
    static code = 6020;
    code = 6020;
    name = "InvalidVerifierIdx";
    constructor(logs) {
        super("6020: ");
        this.logs = logs;
    }
}
export { InvalidVerifierIdx };
class InvalidSelfVerifyRequest extends Error {
    logs;
    static code = 6021;
    code = 6021;
    name = "InvalidSelfVerifyRequest";
    constructor(logs) {
        super("6021: ");
        this.logs = logs;
    }
}
export { InvalidSelfVerifyRequest };
class IncorrectMrEnclave extends Error {
    logs;
    static code = 6022;
    code = 6022;
    name = "IncorrectMrEnclave";
    constructor(logs) {
        super("6022: ");
        this.logs = logs;
    }
}
export { IncorrectMrEnclave };
class InvalidResponder extends Error {
    logs;
    static code = 6023;
    code = 6023;
    name = "InvalidResponder";
    constructor(logs) {
        super("6023: ");
        this.logs = logs;
    }
}
export { InvalidResponder };
class InvalidAddressLookupAddress extends Error {
    logs;
    static code = 6024;
    code = 6024;
    name = "InvalidAddressLookupAddress";
    msg = "The provided address_lookup_address did not match the expected address on-chain";
    constructor(logs) {
        super("6024: The provided address_lookup_address did not match the expected address on-chain");
        this.logs = logs;
    }
}
export { InvalidAddressLookupAddress };
class InvalidQueue extends Error {
    logs;
    static code = 6025;
    code = 6025;
    name = "InvalidQueue";
    msg = "The provided attestation queue address did not match the expected address on-chain";
    constructor(logs) {
        super("6025: The provided attestation queue address did not match the expected address on-chain");
        this.logs = logs;
    }
}
export { InvalidQueue };
class IllegalVerifier extends Error {
    logs;
    static code = 6026;
    code = 6026;
    name = "IllegalVerifier";
    constructor(logs) {
        super("6026: ");
        this.logs = logs;
    }
}
export { IllegalVerifier };
class InvalidEscrow extends Error {
    logs;
    static code = 6027;
    code = 6027;
    name = "InvalidEscrow";
    constructor(logs) {
        super("6027: ");
        this.logs = logs;
    }
}
export { InvalidEscrow };
class InvalidAuthority extends Error {
    logs;
    static code = 6028;
    code = 6028;
    name = "InvalidAuthority";
    msg = "The provided authority account does not match the expected value on-chain";
    constructor(logs) {
        super("6028: The provided authority account does not match the expected value on-chain");
        this.logs = logs;
    }
}
export { InvalidAuthority };
class IllegalExecuteAttempt extends Error {
    logs;
    static code = 6029;
    code = 6029;
    name = "IllegalExecuteAttempt";
    constructor(logs) {
        super("6029: ");
        this.logs = logs;
    }
}
export { IllegalExecuteAttempt };
class RequestExpired extends Error {
    logs;
    static code = 6030;
    code = 6030;
    name = "RequestExpired";
    msg = "The requests expirationSlot has expired";
    constructor(logs) {
        super("6030: The requests expirationSlot has expired");
        this.logs = logs;
    }
}
export { RequestExpired };
class InsufficientFunds extends Error {
    logs;
    static code = 6031;
    code = 6031;
    name = "InsufficientFunds";
    msg = "The escrow has insufficient funds for this action";
    constructor(logs) {
        super("6031: The escrow has insufficient funds for this action");
        this.logs = logs;
    }
}
export { InsufficientFunds };
class MissingFunctionEscrow extends Error {
    logs;
    static code = 6032;
    code = 6032;
    name = "MissingFunctionEscrow";
    msg = "The FunctionAccount escrow is required if function.requests_fee is greater than zero";
    constructor(logs) {
        super("6032: The FunctionAccount escrow is required if function.requests_fee is greater than zero");
        this.logs = logs;
    }
}
export { MissingFunctionEscrow };
class InvalidRequest extends Error {
    logs;
    static code = 6033;
    code = 6033;
    name = "InvalidRequest";
    msg = "The provided requestSlot did not match the expected requestSlot on-chain. The request may have already been processed";
    constructor(logs) {
        super("6033: The provided requestSlot did not match the expected requestSlot on-chain. The request may have already been processed");
        this.logs = logs;
    }
}
export { InvalidRequest };
class FunctionNotReady extends Error {
    logs;
    static code = 6034;
    code = 6034;
    name = "FunctionNotReady";
    msg = "The FunctionAccount status is not active (1)";
    constructor(logs) {
        super("6034: The FunctionAccount status is not active (1)");
        this.logs = logs;
    }
}
export { FunctionNotReady };
class UserRequestsDisabled extends Error {
    logs;
    static code = 6035;
    code = 6035;
    name = "UserRequestsDisabled";
    msg = "The FunctionAccount has set requests_disabled to true and disabled this action";
    constructor(logs) {
        super("6035: The FunctionAccount has set requests_disabled to true and disabled this action");
        this.logs = logs;
    }
}
export { UserRequestsDisabled };
class MissingFunctionAuthority extends Error {
    logs;
    static code = 6036;
    code = 6036;
    name = "MissingFunctionAuthority";
    msg = "The FunctionAccount authority is required to sign if function.requests_require_authorization is enabled";
    constructor(logs) {
        super("6036: The FunctionAccount authority is required to sign if function.requests_require_authorization is enabled");
        this.logs = logs;
    }
}
export { MissingFunctionAuthority };
class FunctionCloseNotReady extends Error {
    logs;
    static code = 6037;
    code = 6037;
    name = "FunctionCloseNotReady";
    msg = "The FunctionAccount must have no requests before it can be closed";
    constructor(logs) {
        super("6037: The FunctionAccount must have no requests before it can be closed");
        this.logs = logs;
    }
}
export { FunctionCloseNotReady };
class RequestAlreadyInitialized extends Error {
    logs;
    static code = 6038;
    code = 6038;
    name = "RequestAlreadyInitialized";
    msg = "Attempting to initialize an already created FunctionRequestAccount";
    constructor(logs) {
        super("6038: Attempting to initialize an already created FunctionRequestAccount");
        this.logs = logs;
    }
}
export { RequestAlreadyInitialized };
class AccountCloseNotPermitted extends Error {
    logs;
    static code = 6039;
    code = 6039;
    name = "AccountCloseNotPermitted";
    constructor(logs) {
        super("6039: ");
        this.logs = logs;
    }
}
export { AccountCloseNotPermitted };
class AccountCloseNotReady extends Error {
    logs;
    static code = 6040;
    code = 6040;
    name = "AccountCloseNotReady";
    constructor(logs) {
        super("6040: ");
        this.logs = logs;
    }
}
export { AccountCloseNotReady };
class FunctionRequestNotReady extends Error {
    logs;
    static code = 6041;
    code = 6041;
    name = "FunctionRequestNotReady";
    msg = "The FunctionRequestAccount is not ready to be verified";
    constructor(logs) {
        super("6041: The FunctionRequestAccount is not ready to be verified");
        this.logs = logs;
    }
}
export { FunctionRequestNotReady };
export function fromCode(code, logs) {
    switch (code) {
        case 6000:
            return new GenericError(logs);
        case 6001:
            return new InvalidQuote(logs);
        case 6002:
            return new QuoteExpired(logs);
        case 6003:
            return new InvalidNode(logs);
        case 6004:
            return new InsufficientQueue(logs);
        case 6005:
            return new QueueFull(logs);
        case 6006:
            return new InvalidEnclaveSigner(logs);
        case 6007:
            return new InvalidSigner(logs);
        case 6008:
            return new MrEnclavesEmpty(logs);
        case 6009:
            return new MrEnclaveAlreadyExists(logs);
        case 6010:
            return new MrEnclaveDoesntExist(logs);
        case 6011:
            return new MrEnclaveAtCapacity(logs);
        case 6012:
            return new PermissionDenied(logs);
        case 6013:
            return new InvalidConstraint(logs);
        case 6014:
            return new InvalidTimestamp(logs);
        case 6015:
            return new InvalidMrEnclave(logs);
        case 6016:
            return new InvalidReportData(logs);
        case 6017:
            return new InsufficientLoadAmount(logs);
        case 6018:
            return new IncorrectObservedTime(logs);
        case 6019:
            return new InvalidQuoteMode(logs);
        case 6020:
            return new InvalidVerifierIdx(logs);
        case 6021:
            return new InvalidSelfVerifyRequest(logs);
        case 6022:
            return new IncorrectMrEnclave(logs);
        case 6023:
            return new InvalidResponder(logs);
        case 6024:
            return new InvalidAddressLookupAddress(logs);
        case 6025:
            return new InvalidQueue(logs);
        case 6026:
            return new IllegalVerifier(logs);
        case 6027:
            return new InvalidEscrow(logs);
        case 6028:
            return new InvalidAuthority(logs);
        case 6029:
            return new IllegalExecuteAttempt(logs);
        case 6030:
            return new RequestExpired(logs);
        case 6031:
            return new InsufficientFunds(logs);
        case 6032:
            return new MissingFunctionEscrow(logs);
        case 6033:
            return new InvalidRequest(logs);
        case 6034:
            return new FunctionNotReady(logs);
        case 6035:
            return new UserRequestsDisabled(logs);
        case 6036:
            return new MissingFunctionAuthority(logs);
        case 6037:
            return new FunctionCloseNotReady(logs);
        case 6038:
            return new RequestAlreadyInitialized(logs);
        case 6039:
            return new AccountCloseNotPermitted(logs);
        case 6040:
            return new AccountCloseNotReady(logs);
        case 6041:
            return new FunctionRequestNotReady(logs);
    }
    return null;
}
