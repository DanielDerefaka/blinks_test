export type CustomError = GenericError | InvalidQuote | QuoteExpired | InvalidNode | InsufficientQueue | QueueFull | InvalidEnclaveSigner | InvalidSigner | MrEnclavesEmpty | MrEnclaveAlreadyExists | MrEnclaveDoesntExist | MrEnclaveAtCapacity | PermissionDenied | InvalidConstraint | InvalidTimestamp | InvalidMrEnclave | InvalidReportData | InsufficientLoadAmount | IncorrectObservedTime | InvalidQuoteMode | InvalidVerifierIdx | InvalidSelfVerifyRequest | IncorrectMrEnclave | InvalidResponder | InvalidAddressLookupAddress | InvalidQueue | IllegalVerifier | InvalidEscrow | InvalidAuthority | IllegalExecuteAttempt | RequestExpired | InsufficientFunds | MissingFunctionEscrow | InvalidRequest | FunctionNotReady | UserRequestsDisabled | MissingFunctionAuthority | FunctionCloseNotReady | RequestAlreadyInitialized | AccountCloseNotPermitted | AccountCloseNotReady | FunctionRequestNotReady;
export declare class GenericError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "GenericError";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQuote extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "InvalidQuote";
    readonly msg = "The provided enclave quote is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class QuoteExpired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "QuoteExpired";
    readonly msg = "The EnclaveAccount has expired and needs to be reverified";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidNode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "InvalidNode";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientQueue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "InsufficientQueue";
    constructor(logs?: string[] | undefined);
}
export declare class QueueFull extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "QueueFull";
    readonly msg = "The provided queue is full and cannot support new verifiers";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidEnclaveSigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "InvalidEnclaveSigner";
    readonly msg = "The provided enclave_signer does not match the expected enclave_signer on the EnclaveAccount";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "InvalidSigner";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclavesEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "MrEnclavesEmpty";
    readonly msg = "This account has zero mr_enclaves defined";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveAlreadyExists extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "MrEnclaveAlreadyExists";
    readonly msg = "The MrEnclave value already exists in the array";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveDoesntExist extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "MrEnclaveDoesntExist";
    readonly msg = "The MrEnclave value was not found in the whitelist";
    constructor(logs?: string[] | undefined);
}
export declare class MrEnclaveAtCapacity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "MrEnclaveAtCapacity";
    readonly msg = "This account has a full mr_enclaves array. Remove some measurements to make room for new ones";
    constructor(logs?: string[] | undefined);
}
export declare class PermissionDenied extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "PermissionDenied";
    readonly msg = "The PermissionAccount is missing the required flags for this action. Check the queues config to see which permissions are required";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidConstraint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "InvalidConstraint";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTimestamp extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "InvalidTimestamp";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidMrEnclave extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "InvalidMrEnclave";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidReportData extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "InvalidReportData";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientLoadAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "InsufficientLoadAmount";
    constructor(logs?: string[] | undefined);
}
export declare class IncorrectObservedTime extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "IncorrectObservedTime";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQuoteMode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "InvalidQuoteMode";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidVerifierIdx extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "InvalidVerifierIdx";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSelfVerifyRequest extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "InvalidSelfVerifyRequest";
    constructor(logs?: string[] | undefined);
}
export declare class IncorrectMrEnclave extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "IncorrectMrEnclave";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidResponder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "InvalidResponder";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAddressLookupAddress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "InvalidAddressLookupAddress";
    readonly msg = "The provided address_lookup_address did not match the expected address on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidQueue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "InvalidQueue";
    readonly msg = "The provided attestation queue address did not match the expected address on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class IllegalVerifier extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "IllegalVerifier";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidEscrow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "InvalidEscrow";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "InvalidAuthority";
    readonly msg = "The provided authority account does not match the expected value on-chain";
    constructor(logs?: string[] | undefined);
}
export declare class IllegalExecuteAttempt extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "IllegalExecuteAttempt";
    constructor(logs?: string[] | undefined);
}
export declare class RequestExpired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "RequestExpired";
    readonly msg = "The requests expirationSlot has expired";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientFunds extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "InsufficientFunds";
    readonly msg = "The escrow has insufficient funds for this action";
    constructor(logs?: string[] | undefined);
}
export declare class MissingFunctionEscrow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "MissingFunctionEscrow";
    readonly msg = "The FunctionAccount escrow is required if function.requests_fee is greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRequest extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "InvalidRequest";
    readonly msg = "The provided requestSlot did not match the expected requestSlot on-chain. The request may have already been processed";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "FunctionNotReady";
    readonly msg = "The FunctionAccount status is not active (1)";
    constructor(logs?: string[] | undefined);
}
export declare class UserRequestsDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "UserRequestsDisabled";
    readonly msg = "The FunctionAccount has set requests_disabled to true and disabled this action";
    constructor(logs?: string[] | undefined);
}
export declare class MissingFunctionAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "MissingFunctionAuthority";
    readonly msg = "The FunctionAccount authority is required to sign if function.requests_require_authorization is enabled";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionCloseNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "FunctionCloseNotReady";
    readonly msg = "The FunctionAccount must have no requests before it can be closed";
    constructor(logs?: string[] | undefined);
}
export declare class RequestAlreadyInitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "RequestAlreadyInitialized";
    readonly msg = "Attempting to initialize an already created FunctionRequestAccount";
    constructor(logs?: string[] | undefined);
}
export declare class AccountCloseNotPermitted extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "AccountCloseNotPermitted";
    constructor(logs?: string[] | undefined);
}
export declare class AccountCloseNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "AccountCloseNotReady";
    constructor(logs?: string[] | undefined);
}
export declare class FunctionRequestNotReady extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "FunctionRequestNotReady";
    readonly msg = "The FunctionRequestAccount is not ready to be verified";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map