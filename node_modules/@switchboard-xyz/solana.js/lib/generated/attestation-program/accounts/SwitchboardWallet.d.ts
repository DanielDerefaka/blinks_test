/// <reference types="node" resolution-mode="require"/>
import type { SwitchboardProgram } from "../../../SwitchboardProgram.js";
import { PublicKey } from "@solana/web3.js";
export interface SwitchboardWalletFields {
    bump: number;
    initialized: number;
    mint: PublicKey;
    attestationQueue: PublicKey;
    authority: PublicKey;
    name: Array<number>;
    resourceCount: number;
    withdrawAuthority: PublicKey;
    tokenWallet: PublicKey;
    resources: Array<PublicKey>;
    resourcesMaxLen: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export interface SwitchboardWalletJSON {
    bump: number;
    initialized: number;
    mint: string;
    attestationQueue: string;
    authority: string;
    name: Array<number>;
    resourceCount: number;
    withdrawAuthority: string;
    tokenWallet: string;
    resources: Array<string>;
    resourcesMaxLen: number;
    /** Reserved. */
    ebuf: Array<number>;
}
export declare class SwitchboardWallet {
    readonly bump: number;
    readonly initialized: number;
    readonly mint: PublicKey;
    readonly attestationQueue: PublicKey;
    readonly authority: PublicKey;
    readonly name: Array<number>;
    readonly resourceCount: number;
    readonly withdrawAuthority: PublicKey;
    readonly tokenWallet: PublicKey;
    readonly resources: Array<PublicKey>;
    readonly resourcesMaxLen: number;
    /** Reserved. */
    readonly ebuf: Array<number>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: SwitchboardWalletFields);
    static fetch(program: SwitchboardProgram, address: PublicKey, programId?: PublicKey): Promise<SwitchboardWallet | null>;
    static fetchMultiple(program: SwitchboardProgram, addresses: PublicKey[], programId?: PublicKey): Promise<Array<SwitchboardWallet | null>>;
    static decode(data: Buffer): SwitchboardWallet;
    toJSON(): SwitchboardWalletJSON;
    static fromJSON(obj: SwitchboardWalletJSON): SwitchboardWallet;
}
//# sourceMappingURL=SwitchboardWallet.d.ts.map