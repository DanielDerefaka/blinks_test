{"version":3,"sources":["../src/client.ts","../src/types.ts","../src/idl/marginfi-types.ts","../src/config.ts","../src/configs.json","../src/group.ts","../src/bank.ts","../src/account.ts","../src/instructions.ts","../src/constants.ts","../src/clientReadonly.ts","../src/accountReadonly.ts","../src/utils.ts"],"names":["translateAddress","PublicKey","Transaction","BankVaultType","AccountType","BorshCoder","BigNumber","SystemProgram","userAta","createAtaIdempotentIx","assets","liabilities","MarginRequirementType","nativeToUi","wrappedI80F48toBigNumber","OracleSetup","PriceBias","DEFAULT_COMMITMENT","accountData","AnchorProvider","BorshAccountsCoder","Program","bs58","Connection","shortenAddress"],"mappings":"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KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,IACA;AAAA,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","sourcesContent":["import { Address, AnchorProvider, BorshAccountsCoder, Program, translateAddress } from \"@project-serum/anchor\";\nimport { bs58 } from \"@project-serum/anchor/dist/cjs/utils/bytes\";\nimport {\n  ConfirmOptions,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionMessage,\n  TransactionSignature,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { AccountType, Environment, MarginfiConfig, MarginfiProgram } from \"./types\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { getConfig } from \"./config\";\nimport MarginfiGroup from \"./group\";\nimport instructions from \"./instructions\";\nimport MarginfiAccount, { MarginfiAccountData } from \"./account\";\nimport {\n  DEFAULT_COMMITMENT,\n  DEFAULT_CONFIRM_OPTS,\n  InstructionsWrapper,\n  loadKeypair,\n  NodeWallet,\n  TransactionOptions,\n  Wallet,\n} from \"@mrgnlabs/mrgn-common\";\nimport { OraclePriceData, OracleSetup } from \"./bank\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport { BigNumber } from \"bignumber.js\";\nimport { PYTH_PRICE_CONF_INTERVALS, SWB_PRICE_CONF_INTERVALS } from \"./constants\";\nimport { AggregatorAccount, SwitchboardProgram } from \"@switchboard-xyz/solana.js\";\n\n/**\n * Entrypoint to interact with the marginfi contract.\n */\nclass MarginfiClient {\n  public readonly programId: PublicKey;\n  private _group: MarginfiGroup;\n\n  /**\n   * @internal\n   */\n  private constructor(\n    readonly config: MarginfiConfig,\n    readonly program: MarginfiProgram,\n    readonly wallet: Wallet,\n    group: MarginfiGroup\n  ) {\n    this.programId = config.programId;\n    this._group = group;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiClient factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param config marginfi config\n   * @param wallet User wallet (used to pay fees and sign transactions)\n   * @param connection Solana web.js Connection object\n   * @param opts Solana web.js ConfirmOptions object\n   * @returns MarginfiClient instance\n   */\n  static async fetch(config: MarginfiConfig, wallet: Wallet, connection: Connection, opts?: ConfirmOptions) {\n    const provider = new AnchorProvider(connection, wallet, {\n      ...AnchorProvider.defaultOptions(),\n      commitment: connection.commitment ?? AnchorProvider.defaultOptions().commitment,\n      ...opts,\n    });\n\n    const program = new Program(MARGINFI_IDL, config.programId, provider) as any as MarginfiProgram;\n    return new MarginfiClient(config, program, wallet, await MarginfiGroup.fetch(config, program, opts?.commitment));\n  }\n\n  static async fromEnv(\n    overrides?: Partial<{\n      env: Environment;\n      connection: Connection;\n      programId: Address;\n      marginfiGroup: Address;\n      wallet: Wallet;\n    }>\n  ): Promise<MarginfiClient> {\n    const env = overrides?.env ?? (process.env.MARGINFI_ENV! as Environment);\n    const connection =\n      overrides?.connection ??\n      new Connection(process.env.MARGINFI_RPC_ENDPOINT!, {\n        commitment: DEFAULT_COMMITMENT,\n      });\n    const programId = overrides?.programId ?? new PublicKey(process.env.MARGINFI_PROGRAM!);\n    const groupPk =\n      overrides?.marginfiGroup ??\n      (process.env.MARGINFI_GROUP ? new PublicKey(process.env.MARGINFI_GROUP) : PublicKey.default);\n    const wallet =\n      overrides?.wallet ??\n      new NodeWallet(\n        process.env.MARGINFI_WALLET_KEY\n          ? Keypair.fromSecretKey(new Uint8Array(JSON.parse(process.env.MARGINFI_WALLET_KEY)))\n          : loadKeypair(process.env.MARGINFI_WALLET!)\n      );\n\n    const config = await getConfig(env, {\n      groupPk: translateAddress(groupPk),\n      programId: translateAddress(programId),\n    });\n\n    return MarginfiClient.fetch(config, wallet, connection, {\n      commitment: connection.commitment,\n    });\n  }\n\n  // --- Getters and setters\n\n  /**\n   * Marginfi account group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  get provider(): AnchorProvider {\n    return this.program.provider as AnchorProvider;\n  }\n\n  // --- Others\n\n  /**\n   * Create transaction instruction to create a new marginfi account under the authority of the user.\n   *\n   * @returns transaction instruction\n   */\n  async makeCreateMarginfiAccountIx(marginfiAccountKeypair?: Keypair): Promise<InstructionsWrapper> {\n    const accountKeypair = marginfiAccountKeypair || Keypair.generate();\n\n    const initMarginfiAccountIx = await instructions.makeInitMarginfiAccountIx(this.program, {\n      marginfiGroupPk: this._group.publicKey,\n      marginfiAccountPk: accountKeypair.publicKey,\n      authorityPk: this.provider.wallet.publicKey,\n      feePayerPk: this.provider.wallet.publicKey,\n    });\n\n    const ixs = [initMarginfiAccountIx];\n\n    return {\n      instructions: ixs,\n      keys: [accountKeypair],\n    };\n  }\n\n  /**\n   * Create a new marginfi account under the authority of the user.\n   *\n   * @returns MarginfiAccount instance\n   */\n  async createMarginfiAccount(opts?: TransactionOptions): Promise<MarginfiAccount> {\n    const accountKeypair = Keypair.generate();\n\n    const ixs = await this.makeCreateMarginfiAccountIx(accountKeypair);\n    const tx = new Transaction().add(...ixs.instructions);\n    const sig = await this.processTransaction(tx, ixs.keys, opts);\n\n    return opts?.dryRun\n      ? Promise.resolve(undefined as unknown as MarginfiAccount)\n      : MarginfiAccount.fetch(accountKeypair.publicKey, this, opts?.commitment);\n  }\n\n  /**\n   * Retrieves the addresses of all marginfi accounts in the underlying group.\n   *\n   * @returns Account addresses\n   */\n  async getAllMarginfiAccountAddresses(): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(this.programId, {\n        commitment: this.program.provider.connection.commitment,\n        dataSlice: {\n          offset: 0,\n          length: 0,\n        },\n        filters: [\n          {\n            memcmp: {\n              bytes: this._group.publicKey.toBase58(),\n              offset: 8, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n            },\n          },\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(BorshAccountsCoder.accountDiscriminator(AccountType.MarginfiAccount)),\n            },\n          },\n        ],\n      })\n    ).map((a) => a.pubkey);\n  }\n\n  /**\n   * Retrieves all marginfi accounts under the specified authority.\n   *\n   * @returns MarginfiAccount instances\n   */\n  async getMarginfiAccountsForAuthority(authority?: Address): Promise<MarginfiAccount[]> {\n    const marginfiGroup = await MarginfiGroup.fetch(this.config, this.program);\n    const _authority = authority ? translateAddress(authority) : this.provider.wallet.publicKey;\n\n    return (\n      await this.program.account.marginfiAccount.all([\n        {\n          memcmp: {\n            bytes: this._group.publicKey.toBase58(),\n            offset: 8, // marginfiGroup is the first field in the account, so only offset is the discriminant\n          },\n        },\n        {\n          memcmp: {\n            bytes: _authority.toBase58(),\n            offset: 8 + 32, // authority is the second field in the account after the authority, so offset by the discriminant and a pubkey\n          },\n        },\n      ])\n    ).map((a) => MarginfiAccount.fromAccountData(a.publicKey, this, a.account as MarginfiAccountData, marginfiGroup));\n  }\n\n  /**\n   * Retrieves the addresses of all accounts owned by the marginfi program.\n   *\n   * @returns Account addresses\n   */\n  async getAllProgramAccountAddresses(type: AccountType): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(this.programId, {\n        commitment: this.program.provider.connection.commitment,\n        dataSlice: {\n          offset: 0,\n          length: 0,\n        },\n        filters: [\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(BorshAccountsCoder.accountDiscriminator(type)),\n            },\n          },\n        ],\n      })\n    ).map((a) => a.pubkey);\n  }\n\n  async processTransaction(\n    transaction: Transaction | VersionedTransaction,\n    signers?: Array<Signer>,\n    opts?: TransactionOptions\n  ): Promise<TransactionSignature> {\n    let signature: TransactionSignature = \"\";\n\n    console.log(\"client.ts\");\n\n    try {\n      let versionedTransaction: VersionedTransaction;\n      const connection = new Connection(this.provider.connection.rpcEndpoint, this.provider.opts);\n\n      const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n      } = await connection.getLatestBlockhashAndContext();\n\n      if (transaction instanceof Transaction) {\n        const versionedMessage = new TransactionMessage({\n          instructions: transaction.instructions,\n          payerKey: this.provider.publicKey,\n          recentBlockhash: blockhash,\n        });\n\n        versionedTransaction = new VersionedTransaction(versionedMessage.compileToV0Message([]));\n      } else {\n        versionedTransaction = transaction;\n      }\n\n      versionedTransaction = await this.wallet.signTransaction(versionedTransaction);\n      if (signers) versionedTransaction.sign(signers);\n\n      if (opts?.dryRun) {\n        const response = await connection.simulateTransaction(\n          versionedTransaction,\n          opts ?? { minContextSlot, sigVerify: false }\n        );\n        console.log(\n          response.value.err ? `❌ Error: ${response.value.err}` : `✅ Success - ${response.value.unitsConsumed} CU`\n        );\n        console.log(\"------ Logs 👇 ------\");\n        console.log(response.value.logs);\n\n        const signaturesEncoded = encodeURIComponent(\n          JSON.stringify(versionedTransaction.signatures.map((s) => bs58.encode(s)))\n        );\n        const messageEncoded = encodeURIComponent(\n          Buffer.from(versionedTransaction.message.serialize()).toString(\"base64\")\n        );\n        console.log(Buffer.from(versionedTransaction.message.serialize()).toString(\"base64\"));\n\n        const urlEscaped = `https://explorer.solana.com/tx/inspector?cluster=${this.config.cluster}&signatures=${signaturesEncoded}&message=${messageEncoded}`;\n        console.log(\"------ Inspect 👇 ------\");\n        console.log(urlEscaped);\n\n        return versionedTransaction.signatures[0].toString();\n      } else {\n        let mergedOpts: ConfirmOptions = {\n          ...DEFAULT_CONFIRM_OPTS,\n          commitment: connection.commitment ?? DEFAULT_CONFIRM_OPTS.commitment,\n          preflightCommitment: connection.commitment ?? DEFAULT_CONFIRM_OPTS.commitment,\n          minContextSlot,\n          ...opts,\n        };\n\n        signature = await connection.sendTransaction(versionedTransaction, {\n          minContextSlot: mergedOpts.minContextSlot,\n          skipPreflight: mergedOpts.skipPreflight,\n          preflightCommitment: mergedOpts.preflightCommitment,\n          maxRetries: mergedOpts.maxRetries,\n        });\n        await connection.confirmTransaction(\n          {\n            blockhash,\n            lastValidBlockHeight,\n            signature,\n          },\n          mergedOpts.commitment\n        );\n        return signature;\n      }\n    } catch (error: any) {\n      if (error.logs) {\n        console.log(\"------ Logs 👇 ------\");\n        console.log(error.logs.join(\"\\n\"));\n      }\n\n      throw `Transaction failed! ${error?.message}`;\n    }\n  }\n}\n\nexport default MarginfiClient;\n","import { PublicKey } from \"@solana/web3.js\";\nimport { Marginfi } from \"./idl/marginfi-types\";\nimport { Program } from \"@mrgnlabs/mrgn-common\";\n\nexport type MarginfiProgram = Program<Marginfi>;\n\n/**\n * Supported config environments.\n */\nexport type Environment = \"production\" | \"alpha\" | \"staging\" | \"dev\" | \"mainnet-test-1\" | \"dev.1\";\n\n/**\n * Marginfi bank vault type\n */\nexport enum BankVaultType {\n  LiquidityVault,\n  InsuranceVault,\n  FeeVault,\n}\n\nexport interface MarginfiConfig {\n  environment: Environment;\n  cluster: string;\n  programId: PublicKey;\n  groupPk: PublicKey;\n  banks: BankAddress[];\n}\n\nexport interface BankAddress {\n  label: string;\n  address: PublicKey;\n}\n\n// --- On-chain account structs\n\nexport enum AccountType {\n  MarginfiGroup = \"marginfiGroup\",\n  MarginfiAccount = \"marginfiAccount\",\n}\n","export type Marginfi = {\n  version: \"0.1.0\";\n  name: \"marginfi\";\n  instructions: [\n    {\n      name: \"marginfiGroupInitialize\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"marginfiGroupConfigure\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        }\n      ];\n      args: [\n        {\n          name: \"config\";\n          type: {\n            defined: \"GroupConfig\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolAddBank\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"bankMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"liquidityVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"insuranceVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"feeVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"fee_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"feeVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"fee_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"bankConfig\";\n          type: {\n            defined: \"BankConfig\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolConfigureBank\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"bankConfigOpt\";\n          type: {\n            defined: \"BankConfigOpt\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolSetupEmissions\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"emissionsMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"emissionsAuth\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"emissions_auth_seed\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Mint\";\n                path: \"emissions_mint\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"emissionsTokenAccount\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"emissions_token_account_seed\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Mint\";\n                path: \"emissions_mint\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"emissionsFundingAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"flags\";\n          type: \"u64\";\n        },\n        {\n          name: \"rate\";\n          type: \"u64\";\n        },\n        {\n          name: \"totalEmissions\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolHandleBankruptcy\";\n      docs: [\"Handle bad debt of a bankrupt marginfi account for a given bank.\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"insuranceVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"marginfiAccountInitialize\";\n      docs: [\"Initialize a marginfi account for a given group\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"authority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"feePayer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"lendingAccountDeposit\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"lendingAccountRepay\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n        {\n          name: \"repayAll\";\n          type: {\n            option: \"bool\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingAccountWithdraw\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n        {\n          name: \"withdrawAll\";\n          type: {\n            option: \"bool\";\n          };\n        }\n      ];\n    },\n    {\n      name: \"lendingAccountBorrow\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"destinationTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"lendingAccountWithdrawEmissions\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"marginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"emissionsMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"emissionsAuth\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"emissions_auth_seed\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Mint\";\n                path: \"emissions_mint\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"emissionsVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"emissions_token_account_seed\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                account: \"Mint\";\n                path: \"emissions_mint\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"destinationAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"lendingAccountLiquidate\";\n      docs: [\"Liquidate a lending account balance of an unhealthy marginfi account\"];\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"assetBank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liabBank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liquidatorMarginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"signer\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"liquidateeMarginfiAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"liab_bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"bankLiquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"liab_bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"bankInsuranceVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"liab_bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [\n        {\n          name: \"assetAmount\";\n          type: \"u64\";\n        }\n      ];\n    },\n    {\n      name: \"lendingPoolAccrueBankInterest\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    },\n    {\n      name: \"lendingPoolCollectBankFees\";\n      accounts: [\n        {\n          name: \"marginfiGroup\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bank\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"liquidityVaultAuthority\";\n          isMut: false;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault_auth\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"liquidityVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"liquidity_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"insuranceVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"insurance_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"feeVault\";\n          isMut: true;\n          isSigner: false;\n          pda: {\n            seeds: [\n              {\n                kind: \"const\";\n                type: \"string\";\n                value: \"fee_vault\";\n              },\n              {\n                kind: \"account\";\n                type: \"publicKey\";\n                path: \"bank\";\n              }\n            ];\n          };\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        }\n      ];\n      args: [];\n    }\n  ];\n  accounts: [\n    {\n      name: \"marginfiAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"group\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"authority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"lendingAccount\";\n            type: {\n              defined: \"LendingAccount\";\n            };\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u64\", 64];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"marginfiGroup\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"padding0\";\n            type: {\n              array: [\"u128\", 32];\n            };\n          },\n          {\n            name: \"padding1\";\n            type: {\n              array: [\"u128\", 32];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"bank\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"mintDecimals\";\n            type: \"u8\";\n          },\n          {\n            name: \"group\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"ignore1\";\n            type: {\n              array: [\"u8\", 7];\n            };\n          },\n          {\n            name: \"assetShareValue\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityShareValue\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liquidityVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"liquidityVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"liquidityVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"insuranceVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"insuranceVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"insuranceVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"ignore2\";\n            type: {\n              array: [\"u8\", 4];\n            };\n          },\n          {\n            name: \"collectedInsuranceFeesOutstanding\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"feeVault\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"feeVaultBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"feeVaultAuthorityBump\";\n            type: \"u8\";\n          },\n          {\n            name: \"ignore3\";\n            type: {\n              array: [\"u8\", 6];\n            };\n          },\n          {\n            name: \"collectedGroupFeesOutstanding\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"totalLiabilityShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"totalAssetShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"lastUpdate\";\n            type: \"i64\";\n          },\n          {\n            name: \"config\";\n            type: {\n              defined: \"BankConfig\";\n            };\n          },\n          {\n            name: \"emissionsFlags\";\n            docs: [\n              \"Emissions Config Flags\",\n              \"\",\n              \"- EMISSIONS_FLAG_BORROW_ACTIVE: 1\",\n              \"- EMISSIONS_FLAG_LENDING_ACTIVE: 2\",\n              \"\"\n            ];\n            type: \"u64\";\n          },\n          {\n            name: \"emissionsRate\";\n            docs: [\n              \"Emissions APR.\",\n              \"Number of emitted tokens (emissions_mint) per 1M tokens (bank mint) (native amount) per 1 YEAR.\"\n            ];\n            type: \"u64\";\n          },\n          {\n            name: \"emissionsRemaining\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"emissionsMint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"padding0\";\n            type: {\n              array: [\"u128\", 28];\n            };\n          },\n          {\n            name: \"padding1\";\n            type: {\n              array: [\"u128\", 32];\n            };\n          }\n        ];\n      };\n    }\n  ];\n  types: [\n    {\n      name: \"GroupEventHeader\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"signer\";\n            type: {\n              option: \"publicKey\";\n            };\n          },\n          {\n            name: \"marginfiGroup\";\n            type: \"publicKey\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"AccountEventHeader\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"signer\";\n            type: {\n              option: \"publicKey\";\n            };\n          },\n          {\n            name: \"marginfiAccount\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"marginfiAccountAuthority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"marginfiGroup\";\n            type: \"publicKey\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"LiquidationBalances\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"liquidateeAssetBalance\";\n            type: \"f64\";\n          },\n          {\n            name: \"liquidateeLiabilityBalance\";\n            type: \"f64\";\n          },\n          {\n            name: \"liquidatorAssetBalance\";\n            type: \"f64\";\n          },\n          {\n            name: \"liquidatorLiabilityBalance\";\n            type: \"f64\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"LendingAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"balances\";\n            type: {\n              array: [\n                {\n                  defined: \"Balance\";\n                },\n                16\n              ];\n            };\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u64\", 8];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"Balance\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"active\";\n            type: \"bool\";\n          },\n          {\n            name: \"bankPk\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"ignore\";\n            type: {\n              array: [\"u8\", 7];\n            };\n          },\n          {\n            name: \"assetShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityShares\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"emissionsOutstanding\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"lastUpdate\";\n            type: \"u64\";\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u64\", 1];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"GroupConfig\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"admin\";\n            type: {\n              option: \"publicKey\";\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"InterestRateConfig\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"optimalUtilizationRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"plateauInterestRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"maxInterestRate\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"insuranceFeeFixedApr\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"insuranceIrFee\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"protocolFixedFeeApr\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"protocolIrFee\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u128\", 8];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"InterestRateConfigOpt\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"optimalUtilizationRate\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"plateauInterestRate\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"maxInterestRate\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"insuranceFeeFixedApr\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"insuranceIrFee\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"protocolFixedFeeApr\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"protocolIrFee\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankConfig\";\n      docs: [\"TODO: Convert weights to (u64, u64) to avoid precision loss (maybe?)\"];\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"assetWeightInit\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"assetWeightMaint\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityWeightInit\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"liabilityWeightMaint\";\n            type: {\n              defined: \"WrappedI80F48\";\n            };\n          },\n          {\n            name: \"depositLimit\";\n            type: \"u64\";\n          },\n          {\n            name: \"interestRateConfig\";\n            type: {\n              defined: \"InterestRateConfig\";\n            };\n          },\n          {\n            name: \"operationalState\";\n            type: {\n              defined: \"BankOperationalState\";\n            };\n          },\n          {\n            name: \"oracleSetup\";\n            type: \"u8\";\n          },\n          {\n            name: \"oracleKeys\";\n            type: {\n              array: [\"publicKey\", 5];\n            };\n          },\n          {\n            name: \"ignore1\";\n            type: {\n              array: [\"u8\", 6];\n            };\n          },\n          {\n            name: \"borrowLimit\";\n            type: \"u64\";\n          },\n          {\n            name: \"riskTier\";\n            type: {\n              defined: \"RiskTier\";\n            };\n          },\n          {\n            name: \"padding\";\n            type: {\n              array: [\"u8\", 55];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"WrappedI80F48\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"value\";\n            type: \"i128\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankConfigOpt\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"assetWeightInit\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"assetWeightMaint\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"liabilityWeightInit\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"liabilityWeightMaint\";\n            type: {\n              option: {\n                defined: \"WrappedI80F48\";\n              };\n            };\n          },\n          {\n            name: \"depositLimit\";\n            type: {\n              option: \"u64\";\n            };\n          },\n          {\n            name: \"borrowLimit\";\n            type: {\n              option: \"u64\";\n            };\n          },\n          {\n            name: \"operationalState\";\n            type: {\n              option: {\n                defined: \"BankOperationalState\";\n              };\n            };\n          },\n          {\n            name: \"oracle\";\n            type: {\n              option: {\n                defined: \"OracleConfig\";\n              };\n            };\n          },\n          {\n            name: \"interestRateConfig\";\n            type: {\n              option: {\n                defined: \"InterestRateConfigOpt\";\n              };\n            };\n          },\n          {\n            name: \"riskTier\";\n            type: {\n              option: {\n                defined: \"RiskTier\";\n              };\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"OracleConfig\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"setup\";\n            type: {\n              defined: \"OracleSetup\";\n            };\n          },\n          {\n            name: \"keys\";\n            type: {\n              array: [\"publicKey\", 5];\n            };\n          }\n        ];\n      };\n    },\n    {\n      name: \"BalanceIncreaseType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Any\";\n          },\n          {\n            name: \"RepayOnly\";\n          },\n          {\n            name: \"DepositOnly\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BalanceDecreaseType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Any\";\n          },\n          {\n            name: \"WithdrawOnly\";\n          },\n          {\n            name: \"BorrowOnly\";\n          },\n          {\n            name: \"BypassBorrowLimit\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"WeightType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Initial\";\n          },\n          {\n            name: \"Maintenance\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BalanceSide\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Assets\";\n          },\n          {\n            name: \"Liabilities\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RiskRequirementType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Initial\";\n          },\n          {\n            name: \"Maintenance\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankOperationalState\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Paused\";\n          },\n          {\n            name: \"Operational\";\n          },\n          {\n            name: \"ReduceOnly\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"RiskTier\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Collateral\";\n          },\n          {\n            name: \"Isolated\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"BankVaultType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Liquidity\";\n          },\n          {\n            name: \"Insurance\";\n          },\n          {\n            name: \"Fee\";\n          }\n        ];\n      };\n    },\n    {\n      name: \"OracleSetup\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"None\";\n          },\n          {\n            name: \"PythEma\";\n          },\n          {\n            name: \"SwitchboardV2\";\n          }\n        ];\n      };\n    }\n  ];\n  events: [\n    {\n      name: \"MarginfiGroupCreateEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"MarginfiGroupConfigureEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"config\";\n          type: {\n            defined: \"GroupConfig\";\n          };\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingPoolBankCreateEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingPoolBankConfigureEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"config\";\n          type: {\n            defined: \"BankConfigOpt\";\n          };\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingPoolBankAccrueInterestEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"delta\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"feesCollected\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"insuranceCollected\";\n          type: \"f64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingPoolBankCollectFeesEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"GroupEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"groupFeesCollected\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"groupFeesOutstanding\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"insuranceFeesCollected\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"insuranceFeesOutstanding\";\n          type: \"f64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingPoolBankHandleBankruptcyEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"badDebt\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"coveredAmount\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"socializedAmount\";\n          type: \"f64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"MarginfiAccountCreateEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingAccountDepositEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingAccountRepayEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"closeBalance\";\n          type: \"bool\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingAccountBorrowEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingAccountWithdrawEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"bank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"amount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"closeBalance\";\n          type: \"bool\";\n          index: false;\n        }\n      ];\n    },\n    {\n      name: \"LendingAccountLiquidateEvent\";\n      fields: [\n        {\n          name: \"header\";\n          type: {\n            defined: \"AccountEventHeader\";\n          };\n          index: false;\n        },\n        {\n          name: \"liquidateeMarginfiAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"liquidateeMarginfiAccountAuthority\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"assetBank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"assetMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"liabilityBank\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"liabilityMint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"liquidateePreHealth\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"liquidateePostHealth\";\n          type: \"f64\";\n          index: false;\n        },\n        {\n          name: \"preBalances\";\n          type: {\n            defined: \"LiquidationBalances\";\n          };\n          index: false;\n        },\n        {\n          name: \"postBalances\";\n          type: {\n            defined: \"LiquidationBalances\";\n          };\n          index: false;\n        }\n      ];\n    }\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"MathError\";\n      msg: \"Math error\";\n    },\n    {\n      code: 6001;\n      name: \"BankNotFound\";\n      msg: \"Invalid bank index\";\n    },\n    {\n      code: 6002;\n      name: \"LendingAccountBalanceNotFound\";\n      msg: \"Lending account balance not found\";\n    },\n    {\n      code: 6003;\n      name: \"BankAssetCapacityExceeded\";\n      msg: \"Bank deposit capacity exceeded\";\n    },\n    {\n      code: 6004;\n      name: \"InvalidTransfer\";\n      msg: \"Invalid transfer\";\n    },\n    {\n      code: 6005;\n      name: \"MissingPythOrBankAccount\";\n      msg: \"Missing Pyth or Bank account\";\n    },\n    {\n      code: 6006;\n      name: \"MissingPythAccount\";\n      msg: \"Missing Pyth account\";\n    },\n    {\n      code: 6007;\n      name: \"InvalidOracleAccount\";\n      msg: \"Invalid Pyth account\";\n    },\n    {\n      code: 6008;\n      name: \"MissingBankAccount\";\n      msg: \"Missing Bank account\";\n    },\n    {\n      code: 6009;\n      name: \"InvalidBankAccount\";\n      msg: \"Invalid Bank account\";\n    },\n    {\n      code: 6010;\n      name: \"BadAccountHealth\";\n      msg: \"Bad account health\";\n    },\n    {\n      code: 6011;\n      name: \"LendingAccountBalanceSlotsFull\";\n      msg: \"Lending account balance slots are full\";\n    },\n    {\n      code: 6012;\n      name: \"BankAlreadyExists\";\n      msg: \"Bank already exists\";\n    },\n    {\n      code: 6013;\n      name: \"IllegalLiquidation\";\n      msg: \"Illegal post liquidation state, account is either not unhealthy or liquidation was too big\";\n    },\n    {\n      code: 6014;\n      name: \"AccountNotBankrupt\";\n      msg: \"Account is not bankrupt\";\n    },\n    {\n      code: 6015;\n      name: \"BalanceNotBadDebt\";\n      msg: \"Account balance is not bad debt\";\n    },\n    {\n      code: 6016;\n      name: \"InvalidConfig\";\n      msg: \"Invalid group config\";\n    },\n    {\n      code: 6017;\n      name: \"StaleOracle\";\n      msg: \"Stale oracle data\";\n    },\n    {\n      code: 6018;\n      name: \"BankPaused\";\n      msg: \"Bank paused\";\n    },\n    {\n      code: 6019;\n      name: \"BankReduceOnly\";\n      msg: \"Bank is ReduceOnly mode\";\n    },\n    {\n      code: 6020;\n      name: \"BankAccoutNotFound\";\n      msg: \"Bank is missing\";\n    },\n    {\n      code: 6021;\n      name: \"OperationDepositOnly\";\n      msg: \"Operation is deposit-only\";\n    },\n    {\n      code: 6022;\n      name: \"OperationWithdrawOnly\";\n      msg: \"Operation is withdraw-only\";\n    },\n    {\n      code: 6023;\n      name: \"OperationBorrowOnly\";\n      msg: \"Operation is borrow-only\";\n    },\n    {\n      code: 6024;\n      name: \"OperationRepayOnly\";\n      msg: \"Operation is repay-only\";\n    },\n    {\n      code: 6025;\n      name: \"NoAssetFound\";\n      msg: \"No asset found\";\n    },\n    {\n      code: 6026;\n      name: \"NoLiabilityFound\";\n      msg: \"No liability found\";\n    },\n    {\n      code: 6027;\n      name: \"InvalidOracleSetup\";\n      msg: \"Invalid oracle setup\";\n    },\n    {\n      code: 6028;\n      name: \"IllegalUtilizationRatio\";\n      msg: \"Invalid bank utilization ratio\";\n    },\n    {\n      code: 6029;\n      name: \"BankLiabilityCapacityExceeded\";\n      msg: \"Bank borrow cap exceeded\";\n    },\n    {\n      code: 6030;\n      name: \"InvalidPrice\";\n      msg: \"Invalid Price\";\n    },\n    {\n      code: 6031;\n      name: \"IsolatedAccountIllegalState\";\n      msg: \"Account can have only one liablity when account is under isolated risk\";\n    },\n    {\n      code: 6032;\n      name: \"EmissionsAlreadySetup\";\n      msg: \"Emissions already setup\";\n    },\n    {\n      code: 6033;\n      name: \"OracleNotSetup\";\n      msg: \"Oracle is not set\";\n    },\n    {\n      code: 6034;\n      name: \"InvalidSwitchboardDecimalConversion\";\n      msg: \"Invalid swithcboard decimal conversion\";\n    }\n  ];\n};\n\nexport const IDL: Marginfi = {\n  version: \"0.1.0\",\n  name: \"marginfi\",\n  instructions: [\n    {\n      name: \"marginfiGroupInitialize\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"marginfiGroupConfigure\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"config\",\n          type: {\n            defined: \"GroupConfig\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolAddBank\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"bankMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"liquidityVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"insuranceVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"feeVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"fee_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"feeVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"fee_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"bankConfig\",\n          type: {\n            defined: \"BankConfig\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolConfigureBank\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"bankConfigOpt\",\n          type: {\n            defined: \"BankConfigOpt\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolSetupEmissions\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"emissionsMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"emissionsAuth\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"emissions_auth_seed\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Mint\",\n                path: \"emissions_mint\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"emissionsTokenAccount\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"emissions_token_account_seed\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Mint\",\n                path: \"emissions_mint\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"emissionsFundingAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"flags\",\n          type: \"u64\",\n        },\n        {\n          name: \"rate\",\n          type: \"u64\",\n        },\n        {\n          name: \"totalEmissions\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolHandleBankruptcy\",\n      docs: [\"Handle bad debt of a bankrupt marginfi account for a given bank.\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"insuranceVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"marginfiAccountInitialize\",\n      docs: [\"Initialize a marginfi account for a given group\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"authority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"feePayer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"lendingAccountDeposit\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"lendingAccountRepay\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n        {\n          name: \"repayAll\",\n          type: {\n            option: \"bool\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingAccountWithdraw\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n        {\n          name: \"withdrawAll\",\n          type: {\n            option: \"bool\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"lendingAccountBorrow\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"destinationTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"lendingAccountWithdrawEmissions\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"marginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"emissionsMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"emissionsAuth\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"emissions_auth_seed\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Mint\",\n                path: \"emissions_mint\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"emissionsVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"emissions_token_account_seed\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                account: \"Mint\",\n                path: \"emissions_mint\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"destinationAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"lendingAccountLiquidate\",\n      docs: [\"Liquidate a lending account balance of an unhealthy marginfi account\"],\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"assetBank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liabBank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liquidatorMarginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"signer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"liquidateeMarginfiAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bankLiquidityVaultAuthority\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"liab_bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"bankLiquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"liab_bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"bankInsuranceVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"liab_bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"assetAmount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"lendingPoolAccrueBankInterest\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"lendingPoolCollectBankFees\",\n      accounts: [\n        {\n          name: \"marginfiGroup\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bank\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"liquidityVaultAuthority\",\n          isMut: false,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault_auth\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"liquidityVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"liquidity_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"insuranceVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"insurance_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"feeVault\",\n          isMut: true,\n          isSigner: false,\n          pda: {\n            seeds: [\n              {\n                kind: \"const\",\n                type: \"string\",\n                value: \"fee_vault\",\n              },\n              {\n                kind: \"account\",\n                type: \"publicKey\",\n                path: \"bank\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"marginfiAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"group\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"authority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"lendingAccount\",\n            type: {\n              defined: \"LendingAccount\",\n            },\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u64\", 64],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"marginfiGroup\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"padding0\",\n            type: {\n              array: [\"u128\", 32],\n            },\n          },\n          {\n            name: \"padding1\",\n            type: {\n              array: [\"u128\", 32],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"bank\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"mintDecimals\",\n            type: \"u8\",\n          },\n          {\n            name: \"group\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"ignore1\",\n            type: {\n              array: [\"u8\", 7],\n            },\n          },\n          {\n            name: \"assetShareValue\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityShareValue\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liquidityVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"liquidityVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"liquidityVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"insuranceVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"insuranceVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"insuranceVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"ignore2\",\n            type: {\n              array: [\"u8\", 4],\n            },\n          },\n          {\n            name: \"collectedInsuranceFeesOutstanding\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"feeVault\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"feeVaultBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"feeVaultAuthorityBump\",\n            type: \"u8\",\n          },\n          {\n            name: \"ignore3\",\n            type: {\n              array: [\"u8\", 6],\n            },\n          },\n          {\n            name: \"collectedGroupFeesOutstanding\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"totalLiabilityShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"totalAssetShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"lastUpdate\",\n            type: \"i64\",\n          },\n          {\n            name: \"config\",\n            type: {\n              defined: \"BankConfig\",\n            },\n          },\n          {\n            name: \"emissionsFlags\",\n            docs: [\n              \"Emissions Config Flags\",\n              \"\",\n              \"- EMISSIONS_FLAG_BORROW_ACTIVE: 1\",\n              \"- EMISSIONS_FLAG_LENDING_ACTIVE: 2\",\n              \"\",\n            ],\n            type: \"u64\",\n          },\n          {\n            name: \"emissionsRate\",\n            docs: [\n              \"Emissions APR.\",\n              \"Number of emitted tokens (emissions_mint) per 1M tokens (bank mint) (native amount) per 1 YEAR.\",\n            ],\n            type: \"u64\",\n          },\n          {\n            name: \"emissionsRemaining\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"emissionsMint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"padding0\",\n            type: {\n              array: [\"u128\", 28],\n            },\n          },\n          {\n            name: \"padding1\",\n            type: {\n              array: [\"u128\", 32],\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"GroupEventHeader\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"signer\",\n            type: {\n              option: \"publicKey\",\n            },\n          },\n          {\n            name: \"marginfiGroup\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"AccountEventHeader\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"signer\",\n            type: {\n              option: \"publicKey\",\n            },\n          },\n          {\n            name: \"marginfiAccount\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"marginfiAccountAuthority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"marginfiGroup\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"LiquidationBalances\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"liquidateeAssetBalance\",\n            type: \"f64\",\n          },\n          {\n            name: \"liquidateeLiabilityBalance\",\n            type: \"f64\",\n          },\n          {\n            name: \"liquidatorAssetBalance\",\n            type: \"f64\",\n          },\n          {\n            name: \"liquidatorLiabilityBalance\",\n            type: \"f64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"LendingAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"balances\",\n            type: {\n              array: [\n                {\n                  defined: \"Balance\",\n                },\n                16,\n              ],\n            },\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u64\", 8],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"Balance\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"active\",\n            type: \"bool\",\n          },\n          {\n            name: \"bankPk\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"ignore\",\n            type: {\n              array: [\"u8\", 7],\n            },\n          },\n          {\n            name: \"assetShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityShares\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"emissionsOutstanding\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"lastUpdate\",\n            type: \"u64\",\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u64\", 1],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"GroupConfig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"admin\",\n            type: {\n              option: \"publicKey\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"InterestRateConfig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"optimalUtilizationRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"plateauInterestRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"maxInterestRate\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"insuranceFeeFixedApr\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"insuranceIrFee\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"protocolFixedFeeApr\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"protocolIrFee\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u128\", 8],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"InterestRateConfigOpt\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"optimalUtilizationRate\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"plateauInterestRate\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"maxInterestRate\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"insuranceFeeFixedApr\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"insuranceIrFee\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"protocolFixedFeeApr\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"protocolIrFee\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankConfig\",\n      docs: [\"TODO: Convert weights to (u64, u64) to avoid precision loss (maybe?)\"],\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"assetWeightInit\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"assetWeightMaint\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityWeightInit\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"liabilityWeightMaint\",\n            type: {\n              defined: \"WrappedI80F48\",\n            },\n          },\n          {\n            name: \"depositLimit\",\n            type: \"u64\",\n          },\n          {\n            name: \"interestRateConfig\",\n            type: {\n              defined: \"InterestRateConfig\",\n            },\n          },\n          {\n            name: \"operationalState\",\n            type: {\n              defined: \"BankOperationalState\",\n            },\n          },\n          {\n            name: \"oracleSetup\",\n            type: \"u8\",\n          },\n          {\n            name: \"oracleKeys\",\n            type: {\n              array: [\"publicKey\", 5],\n            },\n          },\n          {\n            name: \"ignore1\",\n            type: {\n              array: [\"u8\", 6],\n            },\n          },\n          {\n            name: \"borrowLimit\",\n            type: \"u64\",\n          },\n          {\n            name: \"riskTier\",\n            type: {\n              defined: \"RiskTier\",\n            },\n          },\n          {\n            name: \"padding\",\n            type: {\n              array: [\"u8\", 55],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"WrappedI80F48\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"value\",\n            type: \"i128\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankConfigOpt\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"assetWeightInit\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"assetWeightMaint\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"liabilityWeightInit\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"liabilityWeightMaint\",\n            type: {\n              option: {\n                defined: \"WrappedI80F48\",\n              },\n            },\n          },\n          {\n            name: \"depositLimit\",\n            type: {\n              option: \"u64\",\n            },\n          },\n          {\n            name: \"borrowLimit\",\n            type: {\n              option: \"u64\",\n            },\n          },\n          {\n            name: \"operationalState\",\n            type: {\n              option: {\n                defined: \"BankOperationalState\",\n              },\n            },\n          },\n          {\n            name: \"oracle\",\n            type: {\n              option: {\n                defined: \"OracleConfig\",\n              },\n            },\n          },\n          {\n            name: \"interestRateConfig\",\n            type: {\n              option: {\n                defined: \"InterestRateConfigOpt\",\n              },\n            },\n          },\n          {\n            name: \"riskTier\",\n            type: {\n              option: {\n                defined: \"RiskTier\",\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"OracleConfig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"setup\",\n            type: {\n              defined: \"OracleSetup\",\n            },\n          },\n          {\n            name: \"keys\",\n            type: {\n              array: [\"publicKey\", 5],\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"BalanceIncreaseType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Any\",\n          },\n          {\n            name: \"RepayOnly\",\n          },\n          {\n            name: \"DepositOnly\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BalanceDecreaseType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Any\",\n          },\n          {\n            name: \"WithdrawOnly\",\n          },\n          {\n            name: \"BorrowOnly\",\n          },\n          {\n            name: \"BypassBorrowLimit\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"WeightType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Initial\",\n          },\n          {\n            name: \"Maintenance\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BalanceSide\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Assets\",\n          },\n          {\n            name: \"Liabilities\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RiskRequirementType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Initial\",\n          },\n          {\n            name: \"Maintenance\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankOperationalState\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Paused\",\n          },\n          {\n            name: \"Operational\",\n          },\n          {\n            name: \"ReduceOnly\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RiskTier\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Collateral\",\n          },\n          {\n            name: \"Isolated\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BankVaultType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Liquidity\",\n          },\n          {\n            name: \"Insurance\",\n          },\n          {\n            name: \"Fee\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"OracleSetup\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"None\",\n          },\n          {\n            name: \"PythEma\",\n          },\n          {\n            name: \"SwitchboardV2\",\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: \"MarginfiGroupCreateEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"MarginfiGroupConfigureEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"config\",\n          type: {\n            defined: \"GroupConfig\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingPoolBankCreateEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingPoolBankConfigureEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"config\",\n          type: {\n            defined: \"BankConfigOpt\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingPoolBankAccrueInterestEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"delta\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"feesCollected\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"insuranceCollected\",\n          type: \"f64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingPoolBankCollectFeesEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"GroupEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"groupFeesCollected\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"groupFeesOutstanding\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"insuranceFeesCollected\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"insuranceFeesOutstanding\",\n          type: \"f64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingPoolBankHandleBankruptcyEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"badDebt\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"coveredAmount\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"socializedAmount\",\n          type: \"f64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"MarginfiAccountCreateEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingAccountDepositEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingAccountRepayEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"closeBalance\",\n          type: \"bool\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingAccountBorrowEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingAccountWithdrawEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"bank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"amount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"closeBalance\",\n          type: \"bool\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"LendingAccountLiquidateEvent\",\n      fields: [\n        {\n          name: \"header\",\n          type: {\n            defined: \"AccountEventHeader\",\n          },\n          index: false,\n        },\n        {\n          name: \"liquidateeMarginfiAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"liquidateeMarginfiAccountAuthority\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"assetBank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"assetMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"liabilityBank\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"liabilityMint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"liquidateePreHealth\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"liquidateePostHealth\",\n          type: \"f64\",\n          index: false,\n        },\n        {\n          name: \"preBalances\",\n          type: {\n            defined: \"LiquidationBalances\",\n          },\n          index: false,\n        },\n        {\n          name: \"postBalances\",\n          type: {\n            defined: \"LiquidationBalances\",\n          },\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"MathError\",\n      msg: \"Math error\",\n    },\n    {\n      code: 6001,\n      name: \"BankNotFound\",\n      msg: \"Invalid bank index\",\n    },\n    {\n      code: 6002,\n      name: \"LendingAccountBalanceNotFound\",\n      msg: \"Lending account balance not found\",\n    },\n    {\n      code: 6003,\n      name: \"BankAssetCapacityExceeded\",\n      msg: \"Bank deposit capacity exceeded\",\n    },\n    {\n      code: 6004,\n      name: \"InvalidTransfer\",\n      msg: \"Invalid transfer\",\n    },\n    {\n      code: 6005,\n      name: \"MissingPythOrBankAccount\",\n      msg: \"Missing Pyth or Bank account\",\n    },\n    {\n      code: 6006,\n      name: \"MissingPythAccount\",\n      msg: \"Missing Pyth account\",\n    },\n    {\n      code: 6007,\n      name: \"InvalidOracleAccount\",\n      msg: \"Invalid Pyth account\",\n    },\n    {\n      code: 6008,\n      name: \"MissingBankAccount\",\n      msg: \"Missing Bank account\",\n    },\n    {\n      code: 6009,\n      name: \"InvalidBankAccount\",\n      msg: \"Invalid Bank account\",\n    },\n    {\n      code: 6010,\n      name: \"BadAccountHealth\",\n      msg: \"Bad account health\",\n    },\n    {\n      code: 6011,\n      name: \"LendingAccountBalanceSlotsFull\",\n      msg: \"Lending account balance slots are full\",\n    },\n    {\n      code: 6012,\n      name: \"BankAlreadyExists\",\n      msg: \"Bank already exists\",\n    },\n    {\n      code: 6013,\n      name: \"IllegalLiquidation\",\n      msg: \"Illegal post liquidation state, account is either not unhealthy or liquidation was too big\",\n    },\n    {\n      code: 6014,\n      name: \"AccountNotBankrupt\",\n      msg: \"Account is not bankrupt\",\n    },\n    {\n      code: 6015,\n      name: \"BalanceNotBadDebt\",\n      msg: \"Account balance is not bad debt\",\n    },\n    {\n      code: 6016,\n      name: \"InvalidConfig\",\n      msg: \"Invalid group config\",\n    },\n    {\n      code: 6017,\n      name: \"StaleOracle\",\n      msg: \"Stale oracle data\",\n    },\n    {\n      code: 6018,\n      name: \"BankPaused\",\n      msg: \"Bank paused\",\n    },\n    {\n      code: 6019,\n      name: \"BankReduceOnly\",\n      msg: \"Bank is ReduceOnly mode\",\n    },\n    {\n      code: 6020,\n      name: \"BankAccoutNotFound\",\n      msg: \"Bank is missing\",\n    },\n    {\n      code: 6021,\n      name: \"OperationDepositOnly\",\n      msg: \"Operation is deposit-only\",\n    },\n    {\n      code: 6022,\n      name: \"OperationWithdrawOnly\",\n      msg: \"Operation is withdraw-only\",\n    },\n    {\n      code: 6023,\n      name: \"OperationBorrowOnly\",\n      msg: \"Operation is borrow-only\",\n    },\n    {\n      code: 6024,\n      name: \"OperationRepayOnly\",\n      msg: \"Operation is repay-only\",\n    },\n    {\n      code: 6025,\n      name: \"NoAssetFound\",\n      msg: \"No asset found\",\n    },\n    {\n      code: 6026,\n      name: \"NoLiabilityFound\",\n      msg: \"No liability found\",\n    },\n    {\n      code: 6027,\n      name: \"InvalidOracleSetup\",\n      msg: \"Invalid oracle setup\",\n    },\n    {\n      code: 6028,\n      name: \"IllegalUtilizationRatio\",\n      msg: \"Invalid bank utilization ratio\",\n    },\n    {\n      code: 6029,\n      name: \"BankLiabilityCapacityExceeded\",\n      msg: \"Bank borrow cap exceeded\",\n    },\n    {\n      code: 6030,\n      name: \"InvalidPrice\",\n      msg: \"Invalid Price\",\n    },\n    {\n      code: 6031,\n      name: \"IsolatedAccountIllegalState\",\n      msg: \"Account can have only one liablity when account is under isolated risk\",\n    },\n    {\n      code: 6032,\n      name: \"EmissionsAlreadySetup\",\n      msg: \"Emissions already setup\",\n    },\n    {\n      code: 6033,\n      name: \"OracleNotSetup\",\n      msg: \"Oracle is not set\",\n    },\n    {\n      code: 6034,\n      name: \"InvalidSwitchboardDecimalConversion\",\n      msg: \"Invalid swithcboard decimal conversion\",\n    },\n  ],\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { BankAddress, Environment, MarginfiConfig } from \"./types\";\nimport { array, assert, enums, Infer, object, string } from \"superstruct\";\nimport configs from \"./configs.json\";\n\nconst BankConfigRaw = object({\n  label: string(),\n  address: string(),\n});\nconst MarginfiConfigRaw = object({\n  label: enums([\"production\", \"alpha\", \"staging\", \"dev\", \"mainnet-test-1\", \"dev.1\"]),\n  cluster: string(),\n  program: string(),\n  group: string(),\n  banks: array(BankConfigRaw),\n});\nconst ConfigRaw = array(MarginfiConfigRaw);\n\nexport type BankConfigRaw = Infer<typeof BankConfigRaw>;\nexport type MarginfiConfigRaw = Infer<typeof MarginfiConfigRaw>;\nexport type ConfigRaw = Infer<typeof ConfigRaw>;\n\nfunction parseBankConfig(bankConfigRaw: BankConfigRaw): BankAddress {\n  return {\n    label: bankConfigRaw.label,\n    address: new PublicKey(bankConfigRaw.address),\n  };\n}\n\nfunction parseConfig(configRaw: MarginfiConfigRaw): MarginfiConfig {\n  return {\n    environment: configRaw.label,\n    cluster: configRaw.cluster,\n    programId: new PublicKey(configRaw.program),\n    groupPk: new PublicKey(configRaw.group),\n    banks: configRaw.banks.map((raw) => parseBankConfig(raw)),\n  };\n}\n\nfunction parseConfigs(configRaw: ConfigRaw): {\n  [label: string]: MarginfiConfig;\n} {\n  return configRaw.reduce(\n    (config, current, _) => ({\n      [current.label]: parseConfig(current),\n      ...config,\n    }),\n    {} as {\n      [label: string]: MarginfiConfig;\n    }\n  );\n}\n\nfunction loadDefaultConfig(): {\n  [label: string]: MarginfiConfig;\n} {\n  assert(configs, ConfigRaw);\n  return parseConfigs(configs);\n}\n\n/**\n * Define marginfi-specific config per profile\n *\n * @internal\n */\nfunction getMarginfiConfig(\n  environment: Environment,\n  overrides?: Partial<Omit<MarginfiConfig, \"environment\">>\n): MarginfiConfig {\n  const defaultConfigs = loadDefaultConfig();\n\n  switch (environment) {\n    case \"production\":\n    case \"alpha\":\n    case \"staging\":\n    case \"dev\":\n    case \"mainnet-test-1\":\n    case \"dev.1\":\n      const defaultConfig = defaultConfigs[environment];\n      return {\n        environment,\n        programId: overrides?.programId || defaultConfig.programId,\n        groupPk: overrides?.groupPk || defaultConfig.groupPk,\n        cluster: overrides?.cluster || defaultConfig.cluster,\n        banks: overrides?.banks || defaultConfig.banks,\n      };\n    default:\n      throw Error(`Unknown environment ${environment}`);\n  }\n}\n\n/**\n * Retrieve config per environment\n */\nexport function getConfig(\n  environment: Environment = \"production\",\n  overrides?: Partial<Omit<MarginfiConfig, \"environment\">>\n): MarginfiConfig {\n  return {\n    ...getMarginfiConfig(environment, overrides),\n  };\n}\n","[\n  {\n    \"label\": \"production\",\n    \"cluster\": \"mainnet\",\n    \"program\": \"MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA\",\n    \"group\": \"4qp6Fx6tnZkY5Wropq9wUYgtFxXKwE6viZxFHg3rdAG8\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"2s37akK2eyBbp8DZgCm7RtsaEz8eJP3Nxd4urLHQv7yB\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"CCKtUs6Cgwo4aaQUmBPmyoApH2gUDErxNZCAntD6LYGh\"\n      },\n      {\n        \"label\": \"mSOL\",\n        \"address\": \"22DcjMZrMwC5Bpa5AGBsmjc5V9VuQrXG6N9ZtdUNyYGE\"\n      },\n      {\n        \"label\": \"BONK\",\n        \"address\": \"DeyH7QxWvnbbaVB4zFrf4hoq7Q8z1ZT14co42BGwGtfM\"\n      },\n      {\n        \"label\": \"USDT\",\n        \"address\": \"HmpMfL8942u22htC4EMiWgLX931g3sacXFR6KjuLgKLV\"\n      },\n      {\n        \"label\": \"ETH\",\n        \"address\": \"BkUyfXjbBBALcfZvw76WAFRvYQ21xxMWWeoPtJrUqG3z\"\n      },\n      {\n        \"label\": \"WBTC\",\n        \"address\": \"BKsfDJCMbYep6gr9pq8PsmJbb5XGLHbAJzUV8vmorz7a\"\n      },\n      {\n        \"label\": \"JitoSOL\",\n        \"address\": \"Bohoc1ikHLD7xKJuzTyiTyCwzaL5N7ggJQu75A8mKYM8\"\n      },\n      {\n        \"label\": \"UXD\",\n        \"address\": \"BeNBJrAh1tZg5sqgt8D6AWKJLD5KkBrfZvtcgd7EuiAR\"\n      }\n    ]\n  },\n  {\n    \"label\": \"alpha\",\n    \"cluster\": \"mainnet\",\n    \"program\": \"yyyxaNHJP5FiDhmQW8RkBkp1jTL2cyxJmhMdWpJfsiy\",\n    \"group\": \"7xNRPf4qqgDAkvDEgkRuC4SevR1RUxzosoRb7GsaVsqa\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"Hp5niMGdiSCUmEUJpNyF3n4NMthwwLVTAPZB1hyvVZd9\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"DDxthf5NdQe3VrKByCe41NjsU6tVmVsVBdCAtz143Hdp\"\n      }\n    ]\n  },\n  {\n    \"label\": \"mainnet-test-1\",\n    \"cluster\": \"mainnet\",\n    \"program\": \"MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA\",\n    \"group\": \"CWqJj49NPUGE7Y18QuKcJCC6vEyspCj91oKgECyfxepR\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"4SryZ4bWGqEsNjbqNUKuxnoyagWgbxj6MavyUF2HRzhA\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"BpmLoZcyKJP9Jncq5TE7TTzxPV6PSbKNZkuvU1MB6t8e\"\n      }\n    ]\n  },\n  {\n    \"label\": \"staging\",\n    \"cluster\": \"mainnet\",\n    \"program\": \"MFv2hWf31Z9kbCa1snEPYctwafyhdvnV7FZnsebVacA\",\n    \"group\": \"4qp6Fx6tnZkY5Wropq9wUYgtFxXKwE6viZxFHg3rdAG8\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"2s37akK2eyBbp8DZgCm7RtsaEz8eJP3Nxd4urLHQv7yB\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"CCKtUs6Cgwo4aaQUmBPmyoApH2gUDErxNZCAntD6LYGh\"\n      }\n    ]\n  },\n  {\n    \"label\": \"dev.1\",\n    \"cluster\": \"devnet\",\n    \"program\": \"neetcne3Ctrrud7vLdt2ypMm21gZHGN2mCmqWaMVcBQ\",\n    \"group\": \"2eophx2kdM71vgKQnZXmA7GGCVZ1voRMxU2F4Gcournb\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"Ervy8u3zyS6KZj5CfVRkiL1iykZeChDELZekAq7z9rNk\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"CmHpj7pTmEDg2hCDgTWP7Hcc4zG7nrGRrdjChgz6iM2K\"\n      }\n    ]\n  },\n  {\n    \"label\": \"dev\",\n    \"cluster\": \"devnet\",\n    \"program\": \"A7vUDErNPCTt9qrB6SSM4F6GkxzUe9d8P3cXSmRg4eY4\",\n    \"group\": \"52NC7T3NTPFFwoxJDFk9mbKcA7675DJ39H1iPNz5RjSV\",\n    \"banks\": [\n      {\n        \"label\": \"USDC\",\n        \"address\": \"GhV6ZftLXv3o38CHMhX6nu8GkxS3kvrHSSCVpGFTysUC\"\n      },\n      {\n        \"label\": \"SOL\",\n        \"address\": \"2KvZHa7nPDBwLRz2yasXDnHsbyhrpzWkqEp6mEAnGeLJ\"\n      }\n    ]\n  }\n]\n","import { Address, BN, BorshCoder, translateAddress } from \"@project-serum/anchor\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport { Cluster, Commitment, PublicKey } from \"@solana/web3.js\";\nimport { Bank, BankData, getOraclePriceData } from \"./bank\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { AccountType, MarginfiConfig, MarginfiProgram } from \"./types\";\nimport { DEFAULT_COMMITMENT } from \"@mrgnlabs/mrgn-common\";\n\n/**\n * Wrapper class around a specific marginfi group.\n */\nclass MarginfiGroup {\n  public readonly publicKey: PublicKey;\n\n  private _program: MarginfiProgram;\n  private _config: MarginfiConfig;\n\n  private _admin: PublicKey;\n  private _banks: Map<string, Bank>;\n\n  /**\n   * @internal\n   */\n  private constructor(config: MarginfiConfig, program: MarginfiProgram, rawData: MarginfiGroupData, banks: Bank[]) {\n    this.publicKey = config.groupPk;\n    this._config = config;\n    this._program = program;\n\n    this._admin = rawData.admin;\n    this._banks = banks.reduce((acc, current) => {\n      acc.set(current.publicKey.toBase58(), current);\n      return acc;\n    }, new Map<string, Bank>());\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get admin(): PublicKey {\n    return this._admin;\n  }\n\n  get banks(): Map<string, Bank> {\n    return this._banks;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiGroup network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiGroup.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param commitment Commitment level override\n   * @return MarginfiGroup instance\n   */\n  static async fetch(config: MarginfiConfig, program: MarginfiProgram, commitment?: Commitment) {\n    const accountData = await MarginfiGroup._fetchAccountData(config, program, commitment);\n\n    const bankAccountsData = await program.account.bank.all([\n      { memcmp: { offset: 8 + 32 + 1, bytes: config.groupPk.toBase58() } },\n    ]);\n\n    const banks = await Promise.all(\n      bankAccountsData.map(async (accountData) => {\n        let bankData = accountData.account as any as BankData;\n        return new Bank(\n          config.banks.find((b) => b.address.equals(accountData.publicKey))?.label || \"Unknown\",\n          accountData.publicKey,\n          bankData,\n          await getOraclePriceData(program.provider.connection, bankData.config.oracleSetup, bankData.config.oracleKeys)\n        );\n      })\n    );\n\n    return new MarginfiGroup(config, program, accountData, banks);\n  }\n\n  /**\n   * MarginfiGroup local factory (decoded)\n   *\n   * Instantiate a MarginfiGroup according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param accountData Decoded marginfi group data\n   * @param banks Asset banks\n   * @return MarginfiGroup instance\n   */\n  static fromAccountData(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    accountData: MarginfiGroupData,\n    banks: Bank[]\n  ) {\n    return new MarginfiGroup(config, program, accountData, banks);\n  }\n\n  /**\n   * MarginfiGroup local factory (encoded)\n   *\n   * Instantiate a MarginfiGroup according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param rawData Encoded marginfi group data\n   * @param banks Asset banks\n   * @return MarginfiGroup instance\n   */\n  static fromAccountDataRaw(config: MarginfiConfig, program: MarginfiProgram, rawData: Buffer, banks: Bank[]) {\n    const data = MarginfiGroup.decode(rawData);\n    return MarginfiGroup.fromAccountData(config, program, data, banks);\n  }\n\n  // --- Others\n\n  /**\n   * Fetch marginfi group account data according to the config.\n   * Check sanity against provided config.\n   *\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param commitment Commitment level override\n   * @return Decoded marginfi group account data struct\n   */\n  private static async _fetchAccountData(\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiGroupData> {\n    const mergedCommitment = commitment ?? program.provider.connection.commitment ?? DEFAULT_COMMITMENT;\n\n    return (await program.account.marginfiGroup.fetch(config.groupPk, mergedCommitment)) as any;\n  }\n\n  /**\n   * Decode marginfi group account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @return Decoded marginfi group account data struct\n   */\n  static decode(encoded: Buffer): MarginfiGroupData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiGroup, encoded);\n  }\n\n  /**\n   * Encode marginfi group account data according to the Anchor IDL.\n   *\n   * @param decoded Encoded marginfi group account data buffer\n   * @return Raw data buffer\n   */\n  static async encode(decoded: MarginfiGroupData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiGroup, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload(commitment?: Commitment) {\n    const rawData = await MarginfiGroup._fetchAccountData(this._config, this._program, commitment);\n\n    const bankAddresses = this._config.banks.map((b) => b.address);\n\n    let bankAccountsData = await this._program.account.bank.all([\n      { memcmp: { offset: 8 + 32 + 1, bytes: this._config.groupPk.toBase58() } },\n    ]);\n\n    let nullAccounts = [];\n    for (let i = 0; i < bankAccountsData.length; i++) {\n      if (bankAccountsData[i] === null) nullAccounts.push(bankAddresses[i]);\n    }\n    if (nullAccounts.length > 0) {\n      throw Error(`Failed to fetch banks ${nullAccounts}`);\n    }\n\n    const banks = await Promise.all(\n      bankAccountsData.map(async (accountData) => {\n        let bankData = accountData.account as any as BankData;\n        return new Bank(\n          this._config.banks.find((b) => b.address.equals(accountData.publicKey))?.label || \"Unknown\",\n          accountData.publicKey,\n          bankData,\n          await getOraclePriceData(\n            this._program.provider.connection,\n            bankData.config.oracleSetup,\n            bankData.config.oracleKeys\n          )\n        );\n      })\n    );\n\n    this._admin = rawData.admin;\n    this._banks = banks.reduce((acc, current) => {\n      acc.set(current.publicKey.toBase58(), current);\n      return acc;\n    }, new Map<string, Bank>());\n  }\n\n  /**\n   * Get bank by label.\n   */\n  getBankByLabel(label: string): Bank | null {\n    return [...this._banks.values()].find((bank) => bank.label === label) ?? null;\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  getBankByPk(publicKey: Address): Bank | null {\n    let _publicKey = translateAddress(publicKey);\n    return this._banks.get(_publicKey.toString()) ?? null;\n  }\n\n  getBankByMint(mint: PublicKey): Bank | null {\n    return [...this._banks.values()].find((bank) => bank.mint.equals(mint)) ?? null;\n  }\n}\n\nexport default MarginfiGroup;\n\n// On-chain types\n\nexport interface MarginfiGroupData {\n  admin: PublicKey;\n  reservedSpace: BN[];\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\nimport { MarginRequirementType } from \"./account\";\nimport { PYTH_PRICE_CONF_INTERVALS, SWB_PRICE_CONF_INTERVALS } from \"./constants\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport { getMint, nativeToUi, WrappedI80F48, wrappedI80F48toBigNumber } from \"@mrgnlabs/mrgn-common\";\nimport { AggregatorAccount, SwitchboardProgram } from \"@switchboard-xyz/solana.js\";\n\n/**\n * Wrapper class around a specific marginfi group.\n */\nclass Bank {\n  public readonly publicKey: PublicKey;\n\n  public readonly label: string;\n\n  public group: PublicKey;\n  public mint: PublicKey;\n  public mintDecimals: number;\n\n  public assetShareValue: BigNumber;\n  public liabilityShareValue: BigNumber;\n\n  public liquidityVault: PublicKey;\n  public liquidityVaultBump: number;\n  public liquidityVaultAuthorityBump: number;\n\n  public insuranceVault: PublicKey;\n  public insuranceVaultBump: number;\n  public insuranceVaultAuthorityBump: number;\n  public collectedInsuranceFeesOutstanding: BigNumber;\n\n  public feeVault: PublicKey;\n  public feeVaultBump: number;\n  public feeVaultAuthorityBump: number;\n  public collectedGroupFeesOutstanding: BigNumber;\n\n  public config: BankConfig;\n\n  public totalAssetShares: BigNumber;\n  public totalLiabilityShares: BigNumber;\n\n  public emissionsActiveBorrowing: boolean;\n  public emissionsActiveLending: boolean;\n  public emissionsRate: number;\n  public emissionsMint: PublicKey;\n  public emissionsRemaining: BigNumber;\n\n  private priceData: OraclePriceData;\n\n  constructor(label: string, address: PublicKey, rawData: BankData, priceData: OraclePriceData) {\n    this.label = label;\n    this.publicKey = address;\n\n    this.mint = rawData.mint;\n    this.mintDecimals = rawData.mintDecimals;\n    this.group = rawData.group;\n\n    this.assetShareValue = wrappedI80F48toBigNumber(rawData.assetShareValue);\n    this.liabilityShareValue = wrappedI80F48toBigNumber(rawData.liabilityShareValue);\n\n    this.liquidityVault = rawData.liquidityVault;\n    this.liquidityVaultBump = rawData.liquidityVaultBump;\n    this.liquidityVaultAuthorityBump = rawData.liquidityVaultAuthorityBump;\n\n    this.insuranceVault = rawData.insuranceVault;\n    this.insuranceVaultBump = rawData.insuranceVaultBump;\n    this.insuranceVaultAuthorityBump = rawData.insuranceVaultAuthorityBump;\n\n    this.collectedInsuranceFeesOutstanding = wrappedI80F48toBigNumber(rawData.collectedInsuranceFeesOutstanding);\n\n    this.feeVault = rawData.feeVault;\n    this.feeVaultBump = rawData.feeVaultBump;\n    this.feeVaultAuthorityBump = rawData.feeVaultAuthorityBump;\n\n    this.collectedGroupFeesOutstanding = wrappedI80F48toBigNumber(rawData.collectedGroupFeesOutstanding);\n\n    this.config = {\n      assetWeightInit: wrappedI80F48toBigNumber(rawData.config.assetWeightInit),\n      assetWeightMaint: wrappedI80F48toBigNumber(rawData.config.assetWeightMaint),\n      liabilityWeightInit: wrappedI80F48toBigNumber(rawData.config.liabilityWeightInit),\n      liabilityWeightMaint: wrappedI80F48toBigNumber(rawData.config.liabilityWeightMaint),\n      depositLimit: nativeToUi(rawData.config.depositLimit, this.mintDecimals),\n      oracleSetup: rawData.config.oracleSetup,\n      oracleKeys: rawData.config.oracleKeys,\n      interestRateConfig: {\n        insuranceFeeFixedApr: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.insuranceFeeFixedApr),\n        maxInterestRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.maxInterestRate),\n        insuranceIrFee: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.insuranceIrFee),\n        optimalUtilizationRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.optimalUtilizationRate),\n        plateauInterestRate: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.plateauInterestRate),\n        protocolFixedFeeApr: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.protocolFixedFeeApr),\n        protocolIrFee: wrappedI80F48toBigNumber(rawData.config.interestRateConfig.protocolIrFee),\n      },\n    };\n\n    this.totalAssetShares = wrappedI80F48toBigNumber(rawData.totalAssetShares);\n    this.totalLiabilityShares = wrappedI80F48toBigNumber(rawData.totalLiabilityShares);\n\n    this.priceData = priceData;\n\n    const emissionsFlags = rawData.emissionsFlags.toNumber();\n\n    this.emissionsActiveBorrowing = (emissionsFlags & 1) > 0;\n    this.emissionsActiveLending = (emissionsFlags & 2) > 0;\n\n    // @todo existence checks here should be temporary - remove once all banks have emission configs\n    this.emissionsRate = rawData.emissionsRate.toNumber();\n    this.emissionsMint = rawData.emissionsMint;\n    this.emissionsRemaining = rawData.emissionsRemaining\n      ? wrappedI80F48toBigNumber(rawData.emissionsRemaining)\n      : new BigNumber(0);\n  }\n\n  public describe(): string {\n    return `\nBank: ${this.label}, address: ${this.publicKey.toBase58()}\nMint: ${this.mint.toBase58()}, decimals: ${this.mintDecimals}\n\nTotal deposits: ${nativeToUi(this.totalAssets, this.mintDecimals)}\nTotal borrows: ${nativeToUi(this.totalLiabilities, this.mintDecimals)}\n\nTotal assets (USD value): ${this.getAssetUsdValue(this.totalAssetShares, MarginRequirementType.Equity, PriceBias.None)}\nTotal liabilities (USD value): ${this.getLiabilityUsdValue(\n      this.totalLiabilityShares,\n      MarginRequirementType.Equity,\n      PriceBias.None\n    )}\n\nAsset price (USD): ${this.getPrice(PriceBias.None)}\n\nConfig:\n- Asset weight init: ${this.config.assetWeightInit.toFixed(2)}\n- Asset weight maint: ${this.config.assetWeightMaint.toFixed(2)}\n- Liability weight init: ${this.config.liabilityWeightInit.toFixed(2)}\n- Liability weight maint: ${this.config.liabilityWeightMaint.toFixed(2)}\n- Max capacity: ${this.config.depositLimit}\n\nLTVs:\n- Initial: ${new BigNumber(1).div(this.config.liabilityWeightInit).times(100).toFixed(2)}%\n- Maintenance: ${new BigNumber(1).div(this.config.liabilityWeightMaint).times(100).toFixed(2)}%\n`;\n  }\n\n  get totalAssets(): BigNumber {\n    return this.getAssetQuantity(this.totalAssetShares);\n  }\n\n  get totalLiabilities(): BigNumber {\n    return this.getLiabilityQuantity(this.totalLiabilityShares);\n  }\n\n  public async reloadPriceData(connection: Connection) {\n    this.priceData = await getOraclePriceData(connection, this.config.oracleSetup, this.config.oracleKeys);\n  }\n\n  public getAssetQuantity(assetShares: BigNumber): BigNumber {\n    return assetShares.times(this.assetShareValue);\n  }\n\n  public getLiabilityQuantity(liabilityShares: BigNumber): BigNumber {\n    return liabilityShares.times(this.liabilityShareValue);\n  }\n\n  public getAssetShares(assetValue: BigNumber): BigNumber {\n    return assetValue.div(this.assetShareValue);\n  }\n\n  public getLiabilityShares(liabilityValue: BigNumber): BigNumber {\n    return liabilityValue.div(this.liabilityShareValue);\n  }\n\n  public getAssetUsdValue(\n    assetShares: BigNumber,\n    marginRequirementType: MarginRequirementType,\n    priceBias: PriceBias\n  ): BigNumber {\n    return this.getUsdValue(this.getAssetQuantity(assetShares), priceBias, this.getAssetWeight(marginRequirementType));\n  }\n\n  public getLiabilityUsdValue(\n    liabilityShares: BigNumber,\n    marginRequirementType: MarginRequirementType,\n    priceBias: PriceBias\n  ): BigNumber {\n    return this.getUsdValue(\n      this.getLiabilityQuantity(liabilityShares),\n      priceBias,\n      this.getLiabilityWeight(marginRequirementType)\n    );\n  }\n\n  public getUsdValue(quantity: BigNumber, priceBias: PriceBias, weight?: BigNumber, scaleToBase = true): BigNumber {\n    const price = this.getPrice(priceBias);\n    return quantity\n      .times(price)\n      .times(weight ?? 1)\n      .dividedBy(scaleToBase ? 10 ** this.mintDecimals : 1);\n  }\n\n  public getPrice(priceBias: PriceBias = PriceBias.None): BigNumber {\n    switch (priceBias) {\n      case PriceBias.Lowest:\n        return this.priceData.lowestPrice;\n      case PriceBias.Highest:\n        return this.priceData.highestPrice;\n      case PriceBias.None:\n        return this.priceData.price;\n    }\n  }\n\n  // Return asset weight based on margin requirement types\n  public getAssetWeight(marginRequirementType: MarginRequirementType): BigNumber {\n    switch (marginRequirementType) {\n      case MarginRequirementType.Init:\n        return this.config.assetWeightInit;\n      case MarginRequirementType.Maint:\n        return this.config.assetWeightMaint;\n      case MarginRequirementType.Equity:\n        return new BigNumber(1);\n      default:\n        throw new Error(\"Invalid margin requirement type\");\n    }\n  }\n\n  public getLiabilityWeight(marginRequirementType: MarginRequirementType): BigNumber {\n    switch (marginRequirementType) {\n      case MarginRequirementType.Init:\n        return this.config.liabilityWeightInit;\n      case MarginRequirementType.Maint:\n        return this.config.liabilityWeightMaint;\n      case MarginRequirementType.Equity:\n        return new BigNumber(1);\n      default:\n        throw new Error(\"Invalid margin requirement type\");\n    }\n  }\n\n  public getQuantityFromUsdValue(usdValue: BigNumber, priceBias: PriceBias): BigNumber {\n    const price = this.getPrice(priceBias);\n    return usdValue.div(price);\n  }\n\n  public getInterestRates(): {\n    lendingRate: BigNumber;\n    borrowingRate: BigNumber;\n  } {\n    const { insuranceFeeFixedApr, insuranceIrFee, protocolFixedFeeApr, protocolIrFee } = this.config.interestRateConfig;\n\n    const rateFee = insuranceFeeFixedApr.plus(protocolFixedFeeApr);\n    const fixedFee = insuranceIrFee.plus(protocolIrFee);\n\n    const interestRate = this.interestRateCurve();\n    const utilizationRate = this.getUtilizationRate();\n\n    const lendingRate = interestRate.times(utilizationRate);\n    const borrowingRate = interestRate.times(new BigNumber(1).plus(rateFee)).plus(fixedFee);\n\n    return { lendingRate, borrowingRate };\n  }\n\n  private interestRateCurve(): BigNumber {\n    const { optimalUtilizationRate, plateauInterestRate, maxInterestRate } = this.config.interestRateConfig;\n\n    const utilizationRate = this.getUtilizationRate();\n\n    if (utilizationRate.lte(optimalUtilizationRate)) {\n      return utilizationRate.times(plateauInterestRate).div(optimalUtilizationRate);\n    } else {\n      return utilizationRate\n        .minus(optimalUtilizationRate)\n        .div(new BigNumber(1).minus(optimalUtilizationRate))\n        .times(maxInterestRate.minus(plateauInterestRate))\n        .plus(plateauInterestRate);\n    }\n  }\n\n  private getUtilizationRate(): BigNumber {\n    return this.totalLiabilities.div(this.totalAssets);\n  }\n\n  public async getEmissionsData(\n    connection: Connection\n  ): Promise<{ lendingActive: boolean; borrowingActive: boolean; rateUi: BigNumber; remainingUi: BigNumber }> {\n    const mint = await getMint(connection, this.emissionsMint);\n\n    const remainingUi = this.emissionsRemaining.div(10 ** mint.decimals);\n    let rateUi = this.emissionsRate / 10 ** mint.decimals;\n\n    let bankMintDiff = this.mintDecimals - 6;\n    if (bankMintDiff > 0) {\n      rateUi = rateUi * 10 ** bankMintDiff;\n    } else if (bankMintDiff < 0) {\n      rateUi = rateUi * 10 ** bankMintDiff;\n    }\n\n    return {\n      lendingActive: this.emissionsActiveLending,\n      borrowingActive: this.emissionsActiveBorrowing,\n      rateUi: new BigNumber(rateUi),\n      remainingUi,\n    };\n  }\n}\n\nexport { Bank };\n\n// Client types\n\nexport interface BankConfig {\n  assetWeightInit: BigNumber;\n  assetWeightMaint: BigNumber;\n\n  liabilityWeightInit: BigNumber;\n  liabilityWeightMaint: BigNumber;\n\n  depositLimit: number;\n\n  interestRateConfig: InterestRateConfig;\n\n  oracleSetup: OracleSetup;\n  oracleKeys: PublicKey[];\n}\n\nexport interface InterestRateConfig {\n  // Curve Params\n  optimalUtilizationRate: BigNumber;\n  plateauInterestRate: BigNumber;\n  maxInterestRate: BigNumber;\n\n  // Fees\n  insuranceFeeFixedApr: BigNumber;\n  insuranceIrFee: BigNumber;\n  protocolFixedFeeApr: BigNumber;\n  protocolIrFee: BigNumber;\n}\n\n// On-chain types\n\nexport interface BankData {\n  mint: PublicKey;\n  mintDecimals: number;\n\n  group: PublicKey;\n\n  assetShareValue: WrappedI80F48;\n  liabilityShareValue: WrappedI80F48;\n\n  liquidityVault: PublicKey;\n  liquidityVaultBump: number;\n  liquidityVaultAuthorityBump: number;\n\n  insuranceVault: PublicKey;\n  insuranceVaultBump: number;\n  insuranceVaultAuthorityBump: number;\n  collectedInsuranceFeesOutstanding: WrappedI80F48;\n\n  feeVault: PublicKey;\n  feeVaultBump: number;\n  feeVaultAuthorityBump: number;\n  collectedGroupFeesOutstanding: WrappedI80F48;\n\n  totalLiabilityShares: WrappedI80F48;\n  totalAssetShares: WrappedI80F48;\n\n  lastUpdate: BN;\n\n  config: BankConfigData;\n\n  emissionsFlags: BN;\n  emissionsRate: BN;\n  emissionsMint: PublicKey;\n  emissionsRemaining: WrappedI80F48;\n}\n\nexport enum OracleSetup {\n  None = 0,\n  PythEma = 1,\n  SwitchboardV2 = 2,\n}\n\nexport interface BankConfigData {\n  assetWeightInit: WrappedI80F48;\n  assetWeightMaint: WrappedI80F48;\n\n  liabilityWeightInit: WrappedI80F48;\n  liabilityWeightMaint: WrappedI80F48;\n\n  depositLimit: BN;\n  borrowLimit: BN;\n\n  interestRateConfig: InterestRateConfigData;\n\n  oracleSetup: OracleSetup;\n  oracleKeys: PublicKey[];\n}\n\nexport interface InterestRateConfigData {\n  // Curve Params\n  optimalUtilizationRate: WrappedI80F48;\n  plateauInterestRate: WrappedI80F48;\n  maxInterestRate: WrappedI80F48;\n\n  // Fees\n  insuranceFeeFixedApr: WrappedI80F48;\n  insuranceIrFee: WrappedI80F48;\n  protocolFixedFeeApr: WrappedI80F48;\n  protocolIrFee: WrappedI80F48;\n}\n\nexport enum PriceBias {\n  Lowest = 0,\n  None = 1,\n  Highest = 2,\n}\n\nexport interface OraclePriceData {\n  price: BigNumber;\n  confidenceInterval: BigNumber;\n  lowestPrice: BigNumber;\n  highestPrice: BigNumber;\n}\n\nexport async function getOraclePriceData(\n  connection: Connection,\n  oracleSetup: OracleSetup,\n  oracleKeys: PublicKey[]\n): Promise<OraclePriceData> {\n  switch (oracleSetup) {\n    case OracleSetup.PythEma:\n      const account = await connection.getAccountInfo(oracleKeys[0]!);\n      const pythPriceData = parsePriceData(account!.data);\n\n      const pythPrice = new BigNumber(pythPriceData.emaPrice.value);\n      const pythConfInterval = new BigNumber(pythPriceData.emaConfidence.value);\n      const pythLowestPrice = pythPrice.minus(pythConfInterval.times(PYTH_PRICE_CONF_INTERVALS));\n      const pythHighestPrice = pythPrice.plus(pythConfInterval.times(PYTH_PRICE_CONF_INTERVALS));\n\n      return {\n        price: pythPrice,\n        confidenceInterval: pythConfInterval,\n        lowestPrice: pythLowestPrice,\n        highestPrice: pythHighestPrice,\n      };\n\n    case OracleSetup.SwitchboardV2:\n      const swbProgram = await SwitchboardProgram.load(\"mainnet-beta\", connection);\n      const aggAccount = new AggregatorAccount(swbProgram, oracleKeys[0]);\n\n      const aggData = await aggAccount.loadData();\n      const swbPrice = new BigNumber(AggregatorAccount.decodeLatestValue(aggData)!.toString());\n      const swbConfidence = new BigNumber(aggData.latestConfirmedRound.stdDeviation.toBig().toString());\n\n      const swbLowestPrice = swbPrice.minus(swbConfidence.times(SWB_PRICE_CONF_INTERVALS));\n      const swbHighestPrice = swbPrice.plus(swbConfidence.times(SWB_PRICE_CONF_INTERVALS));\n\n      return {\n        price: swbPrice,\n        confidenceInterval: swbConfidence,\n        lowestPrice: swbLowestPrice,\n        highestPrice: swbHighestPrice,\n      };\n\n    default:\n      console.log(\"Invalid oracle setup\", oracleSetup);\n      throw new Error(`Invalid oracle setup \"${oracleSetup}\"`);\n  }\n}\n","import {\n  Amount,\n  aprToApy,\n  createAssociatedTokenAccountIdempotentInstruction,\n  createCloseAccountInstruction,\n  createSyncNativeInstruction,\n  DEFAULT_COMMITMENT,\n  InstructionsWrapper,\n  NATIVE_MINT,\n  nativeToUi,\n  shortenAddress,\n  uiToNative,\n  WrappedI80F48,\n  wrappedI80F48toBigNumber,\n} from \"@mrgnlabs/mrgn-common\";\nimport { Address, BN, BorshCoder, translateAddress } from \"@project-serum/anchor\";\nimport { associatedAddress } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Commitment,\n  ComputeBudgetProgram,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { MarginfiClient } from \".\";\nimport { Bank, BankData, getOraclePriceData, PriceBias } from \"./bank\";\nimport MarginfiGroup from \"./group\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport instructions from \"./instructions\";\nimport { AccountType, MarginfiConfig, MarginfiProgram } from \"./types\";\n\n/**\n * Wrapper class around a specific marginfi account.\n */\nexport class MarginfiAccount {\n  public readonly publicKey: PublicKey;\n\n  private _group: MarginfiGroup;\n  private _authority: PublicKey;\n  private _lendingBalances: Balance[];\n\n  /**\n   * @internal\n   */\n  private constructor(\n    marginfiAccountPk: PublicKey,\n    readonly client: MarginfiClient,\n    group: MarginfiGroup,\n    rawData: MarginfiAccountData\n  ) {\n    this.publicKey = marginfiAccountPk;\n\n    this._group = group;\n    this._authority = rawData.authority;\n\n    this._lendingBalances = rawData.lendingAccount.balances.map((la) => new Balance(la));\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get authority(): PublicKey {\n    return this._authority;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get activeBalances(): Balance[] {\n    return this._lendingBalances.filter((la) => la.active);\n  }\n\n  /** @internal */\n  private get _program() {\n    return this.client.program;\n  }\n\n  /** @internal */\n  private get _config() {\n    return this.client.config;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiAccount network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param commitment Commitment level override\n   * @returns MarginfiAccount instance\n   */\n  static async fetch(\n    marginfiAccountPk: Address,\n    client: MarginfiClient,\n    commitment?: Commitment\n  ): Promise<MarginfiAccount> {\n    const { config, program } = client;\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    const accountData = await MarginfiAccount._fetchAccountData(_marginfiAccountPk, config, program, commitment);\n\n    const marginfiAccount = new MarginfiAccount(\n      _marginfiAccountPk,\n      client,\n      await MarginfiGroup.fetch(config, program, commitment),\n      accountData\n    );\n\n    return marginfiAccount;\n  }\n\n  /**\n   * MarginfiAccount local factory (decoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param accountData Decoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountData(\n    marginfiAccountPk: Address,\n    client: MarginfiClient,\n    accountData: MarginfiAccountData,\n    marginfiGroup: MarginfiGroup\n  ) {\n    if (!accountData.group.equals(client.config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${accountData.group.toBase58()}. Expected: ${client.config.groupPk.toBase58()}`\n      );\n\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    return new MarginfiAccount(_marginfiAccountPk, client, marginfiGroup, accountData);\n  }\n\n  /**\n   * MarginfiAccount local factory (encoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param marginfiAccountRawData Encoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountDataRaw(\n    marginfiAccountPk: PublicKey,\n    client: MarginfiClient,\n    marginfiAccountRawData: Buffer,\n    marginfiGroup: MarginfiGroup\n  ) {\n    const marginfiAccountData = MarginfiAccount.decode(marginfiAccountRawData);\n\n    return MarginfiAccount.fromAccountData(marginfiAccountPk, client, marginfiAccountData, marginfiGroup);\n  }\n\n  /**\n   * Create transaction instruction to deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @returns `MarginDepositCollateral` transaction instruction\n   */\n  async makeDepositIx(amount: Amount, bank: Bank): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n\n    const remainingAccounts = this.getHealthCheckAccounts([bank]);\n\n    const ix = await instructions.makeDepositIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        authorityPk: this.client.provider.wallet.publicKey,\n        signerTokenAccountPk: userTokenAtaPk,\n        bankPk: bank.publicKey,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals) },\n      remainingAccounts\n    );\n\n    return {\n      instructions: bank.mint.equals(NATIVE_MINT) ? await this.wrapInstructionForWSol(ix, amount) : [ix],\n      keys: [],\n    };\n  }\n\n  /**\n   * Deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @returns Transaction signature\n   */\n  async deposit(amount: Amount, bank: Bank): Promise<string> {\n    const ixs = await this.makeDepositIx(amount, bank);\n    const tx = new Transaction().add(...ixs.instructions);\n    const sig = await this.client.processTransaction(tx, []);\n    await this.reload();\n    return sig;\n  }\n\n  /**\n   * Create transaction instruction to deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @param repayAll (optional) Repay all the liability\n   * @returns `LendingPool` transaction instruction\n   */\n  async makeRepayIx(amount: Amount, bank: Bank, repayAll: boolean = false): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n\n    const remainingAccounts = repayAll\n      ? this.getHealthCheckAccounts([], [bank])\n      : this.getHealthCheckAccounts([bank], []);\n\n    const ix = await instructions.makeRepayIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        authorityPk: this.client.provider.wallet.publicKey,\n        signerTokenAccountPk: userTokenAtaPk,\n        bankPk: bank.publicKey,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals), repayAll },\n      remainingAccounts\n    );\n\n    return {\n      instructions: bank.mint.equals(NATIVE_MINT) ? await this.wrapInstructionForWSol(ix, amount) : [ix],\n      keys: [],\n    };\n  }\n\n  /**\n   * Deposit collateral into the marginfi account.\n   *\n   * @param amount Amount to deposit (UI unit)\n   * @param bank Bank to deposit to\n   * @param repayAll (optional) Repay all the liability\n   * @returns Transaction signature\n   */\n  async repay(amount: Amount, bank: Bank, repayAll: boolean = false): Promise<string> {\n    const ixs = await this.makeRepayIx(amount, bank, repayAll);\n    const tx = new Transaction();\n\n    if (repayAll && !bank.emissionsMint.equals(PublicKey.default)) {\n      const userAta = await associatedAddress({\n        mint: bank.emissionsMint,\n        owner: this.client.provider.wallet.publicKey,\n      });\n      const createAtaIdempotentIx = createAssociatedTokenAccountIdempotentInstruction(\n        this.client.provider.wallet.publicKey,\n        userAta,\n        this.client.provider.wallet.publicKey,\n        bank.emissionsMint\n      );\n\n      tx.add(createAtaIdempotentIx);\n      tx.add(...(await this.makeWithdrawEmissionsIx(bank)).instructions);\n    }\n\n    tx.add(...ixs.instructions);\n    const sig = await this.client.processTransaction(tx);\n    await this.reload();\n    return sig;\n  }\n\n  /**\n   * Create transaction instruction to withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (mint native unit)\n   * @param bank Bank to withdraw from\n   * @param withdrawAll (optional) Withdraw all the asset\n   * @returns `MarginWithdrawCollateral` transaction instruction\n   */\n  async makeWithdrawIx(amount: Amount, bank: Bank, withdrawAll: boolean = false): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n\n    const remainingAccounts = withdrawAll\n      ? this.getHealthCheckAccounts([], [bank])\n      : this.getHealthCheckAccounts([bank], []);\n\n    const ix = await instructions.makeWithdrawIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        signerPk: this.client.provider.wallet.publicKey,\n        bankPk: bank.publicKey,\n        destinationTokenAccountPk: userTokenAtaPk,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals), withdrawAll },\n      remainingAccounts\n    );\n\n    return { instructions: bank.mint.equals(NATIVE_MINT) ? await this.wrapInstructionForWSol(ix) : [ix], keys: [] };\n  }\n\n  /**\n   * Withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (UI unit)\n   * @param bank Bank to withdraw from\n   * @param withdrawAll (optional) Withdraw all the asset\n   * @returns Transaction signature\n   */\n  async withdraw(amount: Amount, bank: Bank, withdrawAll: boolean = false): Promise<string> {\n    const tx = new Transaction();\n\n    if (withdrawAll && !bank.emissionsMint.equals(PublicKey.default)) {\n      const userAta = await associatedAddress({\n        mint: bank.emissionsMint,\n        owner: this.client.provider.wallet.publicKey,\n      });\n      const createAtaIdempotentIx = createAssociatedTokenAccountIdempotentInstruction(\n        this.client.provider.wallet.publicKey,\n        userAta,\n        this.client.provider.wallet.publicKey,\n        bank.emissionsMint\n      );\n\n      tx.add(createAtaIdempotentIx);\n      tx.add(...(await this.makeWithdrawEmissionsIx(bank)).instructions);\n    }\n\n    const userAta = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n    const createAtaIdempotentIx = createAssociatedTokenAccountIdempotentInstruction(\n      this.client.provider.wallet.publicKey,\n      userAta,\n      this.client.provider.wallet.publicKey,\n      bank.mint\n    );\n    tx.add(createAtaIdempotentIx);\n\n    const ixs = await this.makeWithdrawIx(amount, bank, withdrawAll);\n    tx.add(...ixs.instructions);\n\n    const sig = await this.client.processTransaction(tx);\n    await this.reload();\n    return sig;\n  }\n\n  /**\n   * Create transaction instruction to withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (mint native unit)\n   * @param bank Bank to withdraw from\n   * @returns `MarginWithdrawCollateral` transaction instruction\n   */\n  async makeBorrowIx(\n    amount: Amount,\n    bank: Bank,\n    opt?: { remainingAccountsBankOverride?: Bank[] } | undefined\n  ): Promise<InstructionsWrapper> {\n    const userTokenAtaPk = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n\n    const remainingAccounts = this.getHealthCheckAccounts(\n      (opt?.remainingAccountsBankOverride?.length ?? 0) > 0 ? opt?.remainingAccountsBankOverride : [bank]\n    );\n\n    const ix = await instructions.makeBorrowIx(\n      this._program,\n      {\n        marginfiGroupPk: this.group.publicKey,\n        marginfiAccountPk: this.publicKey,\n        signerPk: this.client.provider.wallet.publicKey,\n        bankPk: bank.publicKey,\n        destinationTokenAccountPk: userTokenAtaPk,\n      },\n      { amount: uiToNative(amount, bank.mintDecimals) },\n      remainingAccounts\n    );\n\n    return { instructions: bank.mint.equals(NATIVE_MINT) ? await this.wrapInstructionForWSol(ix) : [ix], keys: [] };\n  }\n\n  /**\n   * Withdraw collateral from the marginfi account.\n   *\n   * @param amount Amount to withdraw (UI unit)\n   * @param bank Bank to withdraw from\n   * @returns Transaction signature\n   */\n  async borrow(amount: Amount, bank: Bank): Promise<string> {\n    const tx = new Transaction();\n\n    const userAta = await associatedAddress({\n      mint: bank.mint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n    const createAtaIdempotentIx = createAssociatedTokenAccountIdempotentInstruction(\n      this.client.provider.wallet.publicKey,\n      userAta,\n      this.client.provider.wallet.publicKey,\n      bank.mint\n    );\n    tx.add(createAtaIdempotentIx);\n\n    const ixs = await this.makeBorrowIx(amount, bank);\n    tx.add(...ixs.instructions);\n    const sig = await this.client.processTransaction(tx);\n    await this.reload();\n    return sig;\n  }\n\n  async makeWithdrawEmissionsIx(bank: Bank): Promise<InstructionsWrapper> {\n    const userAta = await associatedAddress({\n      mint: bank.emissionsMint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n    const ix = await instructions.makelendingAccountWithdrawEmissionIx(this._program, {\n      marginfiGroup: this.group.publicKey,\n      marginfiAccount: this.publicKey,\n      signer: this.client.provider.wallet.publicKey,\n      bank: bank.publicKey,\n      destinationTokenAccount: userAta,\n      emissionsMint: bank.emissionsMint,\n    });\n\n    return { instructions: [ix], keys: [] };\n  }\n\n  async withdrawEmissions(bank: Bank): Promise<string> {\n    const tx = new Transaction();\n    const userAta = await associatedAddress({\n      mint: bank.emissionsMint,\n      owner: this.client.provider.wallet.publicKey,\n    });\n    const createAtaIdempotentIx = createAssociatedTokenAccountIdempotentInstruction(\n      this.client.provider.wallet.publicKey,\n      userAta,\n      this.client.provider.wallet.publicKey,\n      bank.emissionsMint\n    );\n\n    tx.add(createAtaIdempotentIx);\n    tx.add(...(await this.makeWithdrawEmissionsIx(bank)).instructions);\n\n    const sig = await this.client.processTransaction(tx);\n    await this.reload();\n    return sig;\n  }\n\n  // --- Others\n\n  getHealthCheckAccounts(mandatoryBanks: Bank[] = [], excludedBanks: Bank[] = []): AccountMeta[] {\n    const mandatoryBanksSet = new Set(mandatoryBanks.map((b) => b.publicKey.toBase58()));\n    const excludedBanksSet = new Set(excludedBanks.map((b) => b.publicKey.toBase58()));\n    const activeBanks = new Set(this.activeBalances.map((b) => b.bankPk.toBase58()));\n    const banksToAdd = new Set([...mandatoryBanksSet].filter((x) => !activeBanks.has(x)));\n\n    let slotsToKeep = banksToAdd.size;\n    return this._lendingBalances\n      .filter((balance) => {\n        if (balance.active) {\n          return !excludedBanksSet.has(balance.bankPk.toBase58());\n        } else if (slotsToKeep > 0) {\n          slotsToKeep--;\n          return true;\n        } else {\n          return false;\n        }\n      })\n      .map((balance) => {\n        if (balance.active) {\n          return balance.bankPk.toBase58();\n        }\n        const newBank = [...banksToAdd.values()][0];\n        banksToAdd.delete(newBank);\n        return newBank;\n      })\n      .flatMap((bankPk) => {\n        const bank = this._group.getBankByPk(bankPk);\n        if (bank === null) throw Error(`Could not find bank ${bankPk}`);\n        return [\n          {\n            pubkey: new PublicKey(bankPk),\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: bank.config.oracleKeys[0],\n            isSigner: false,\n            isWritable: false,\n          },\n        ];\n      });\n  }\n\n  /**\n   * Fetch marginfi account data.\n   * Check sanity against provided config.\n   *\n   * @param accountAddress account address\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param commitment commitment override\n   * @returns Decoded marginfi account data struct\n   */\n  private static async _fetchAccountData(\n    accountAddress: Address,\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountData> {\n    const mergedCommitment = commitment ?? program.provider.connection.commitment ?? DEFAULT_COMMITMENT;\n\n    const data: MarginfiAccountData = (await program.account.marginfiAccount.fetch(\n      accountAddress,\n      mergedCommitment\n    )) as any;\n\n    if (!data.group.equals(config.groupPk))\n      throw Error(`Marginfi account tied to group ${data.group.toBase58()}. Expected: ${config.groupPk.toBase58()}`);\n\n    return data;\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @returns Decoded marginfi account data struct\n   */\n  static decode(encoded: Buffer): MarginfiAccountData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiAccount, encoded);\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param decoded Marginfi account data struct\n   * @returns Raw data buffer\n   */\n  static async encode(decoded: MarginfiAccountData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiAccount, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload() {\n    const [marginfiGroupAi, marginfiAccountAi] = await this._loadGroupAndAccountAi();\n    const marginfiAccountData = MarginfiAccount.decode(marginfiAccountAi.data);\n    if (!marginfiAccountData.group.equals(this._config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${marginfiAccountData.group.toBase58()}. Expected: ${this._config.groupPk.toBase58()}`\n      );\n\n    const bankAccountsData = await this._program.account.bank.all([\n      { memcmp: { offset: 8 + 32 + 1, bytes: this._config.groupPk.toBase58() } },\n    ]);\n\n    const banks = await Promise.all(\n      bankAccountsData.map(async (accountData) => {\n        let bankData = accountData.account as any as BankData;\n        return new Bank(\n          this._config.banks.find((b) => b.address.equals(accountData.publicKey))?.label || \"Unknown\",\n          accountData.publicKey,\n          bankData,\n          await getOraclePriceData(\n            this._program.provider.connection,\n            bankData.config.oracleSetup,\n            bankData.config.oracleKeys\n          )\n        );\n      })\n    );\n\n    this._group = MarginfiGroup.fromAccountDataRaw(this._config, this._program, marginfiGroupAi.data, banks);\n    this._updateFromAccountData(marginfiAccountData);\n  }\n\n  /**\n   * Update instance data from provided data struct.\n   *\n   * @param data Marginfi account data struct\n   */\n  private _updateFromAccountData(data: MarginfiAccountData) {\n    this._authority = data.authority;\n\n    this._lendingBalances = data.lendingAccount.balances.map((la) => new Balance(la));\n  }\n\n  private async _loadGroupAndAccountAi(): Promise<AccountInfo<Buffer>[]> {\n    let [marginfiGroupAi, marginfiAccountAi] = await this.client.provider.connection.getMultipleAccountsInfo(\n      [this._config.groupPk, this.publicKey],\n      DEFAULT_COMMITMENT\n    );\n\n    if (!marginfiAccountAi) {\n      throw Error(\"Marginfi account no found\");\n    }\n    if (!marginfiGroupAi) {\n      throw Error(\"Marginfi Group Account no found\");\n    }\n\n    return [marginfiGroupAi, marginfiAccountAi];\n  }\n\n  public getHealthComponents(marginReqType: MarginRequirementType): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this.activeBalances\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank) throw Error(`Bank ${shortenAddress(accountBalance.bankPk)} not found`);\n        const { assets, liabilities } = accountBalance.getUsdValueWithPriceBias(bank, marginReqType);\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public canBeLiquidated(): boolean {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Maint);\n\n    return assets.lt(liabilities);\n  }\n\n  public getBalance(bankPk: PublicKey): Balance {\n    return this.activeBalances.find((b) => b.bankPk.equals(bankPk)) ?? Balance.newEmpty(bankPk);\n  }\n\n  public getFreeCollateral(): BigNumber {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Init);\n\n    return BigNumber.max(0, assets.minus(liabilities));\n  }\n\n  private _getHealthComponentsWithoutBias(marginReqType: MarginRequirementType): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this.activeBalances\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank) throw Error(`Bank ${shortenAddress(accountBalance.bankPk)} not found`);\n        const { assets, liabilities } = accountBalance.getUsdValue(bank, marginReqType);\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public computeNetApy(): number {\n    const { assets, liabilities } = this._getHealthComponentsWithoutBias(MarginRequirementType.Equity);\n    const totalUsdValue = assets.minus(liabilities);\n    const apr = this.activeBalances\n      .reduce((weightedApr, balance) => {\n        const bank = this._group.getBankByPk(balance.bankPk);\n        if (!bank) throw Error(`Bank ${balance.bankPk.toBase58()} not found`);\n        return weightedApr\n          .minus(\n            bank\n              .getInterestRates()\n              .borrowingRate.times(balance.getUsdValue(bank, MarginRequirementType.Equity).liabilities)\n              .div(totalUsdValue.isEqualTo(0) ? 1 : totalUsdValue)\n          )\n          .plus(\n            bank\n              .getInterestRates()\n              .lendingRate.times(balance.getUsdValue(bank, MarginRequirementType.Equity).assets)\n              .div(totalUsdValue.isEqualTo(0) ? 1 : totalUsdValue)\n          );\n      }, new BigNumber(0))\n      .toNumber();\n\n    return aprToApy(apr);\n  }\n\n  /**\n   * Calculate the maximum amount of asset that can be withdrawn from a bank given existing deposits of the asset\n   * and the untied collateral of the margin account.\n   *\n   * fc = free collateral\n   * ucb = untied collateral for bank\n   *\n   * q = (min(fc, ucb) / (price_lowest_bias * deposit_weight)) + (fc - min(fc, ucb)) / (price_highest_bias * liab_weight)\n   *\n   *\n   *\n   * NOTE FOR LIQUIDATORS\n   * This function doesn't take into account the collateral received when liquidating an account.\n   */\n  public getMaxBorrowForBank(bank: Bank): BigNumber {\n    const balance = this.getBalance(bank.publicKey);\n\n    const freeCollateral = this.getFreeCollateral();\n    const untiedCollateralForBank = BigNumber.min(\n      bank.getAssetUsdValue(balance.assetShares, MarginRequirementType.Init, PriceBias.Lowest),\n      freeCollateral\n    );\n\n    const priceLowestBias = bank.getPrice(PriceBias.Lowest);\n    const priceHighestBias = bank.getPrice(PriceBias.Highest);\n    const assetWeight = bank.getAssetWeight(MarginRequirementType.Init);\n    const liabWeight = bank.getLiabilityWeight(MarginRequirementType.Init);\n\n    if (assetWeight.eq(0)) {\n      return balance\n        .getQuantityUi(bank)\n        .assets.plus(freeCollateral.minus(untiedCollateralForBank).div(priceHighestBias.times(liabWeight)));\n    } else {\n      return untiedCollateralForBank\n        .div(priceLowestBias.times(assetWeight))\n        .plus(freeCollateral.minus(untiedCollateralForBank).div(priceHighestBias.times(liabWeight)));\n    }\n  }\n\n  /**\n   * Calculate the maximum amount that can be withdrawn form a bank without borrowing.\n   */\n  public getMaxWithdrawForBank(bank: Bank): BigNumber {\n    const assetWeight = bank.getAssetWeight(MarginRequirementType.Init);\n    const balance = this.getBalance(bank.publicKey);\n\n    if (assetWeight.eq(0)) {\n      return balance.getQuantityUi(bank).assets;\n    } else {\n      const freeCollateral = this.getFreeCollateral();\n      const untiedCollateralForBank = BigNumber.min(\n        bank.getAssetUsdValue(balance.assetShares, MarginRequirementType.Init, PriceBias.Lowest),\n        freeCollateral\n      );\n\n      const priceLowestBias = bank.getPrice(PriceBias.Lowest);\n\n      return untiedCollateralForBank.div(priceLowestBias.times(assetWeight));\n    }\n  }\n\n  public async makeLendingAccountLiquidateIx(\n    liquidateeMarginfiAccount: MarginfiAccount,\n    assetBank: Bank,\n    assetQuantityUi: Amount,\n    liabBank: Bank\n  ): Promise<InstructionsWrapper> {\n    const ix = await instructions.makeLendingAccountLiquidateIx(\n      this._program,\n      {\n        marginfiGroup: this._config.groupPk,\n        signer: this.client.provider.wallet.publicKey,\n        assetBank: assetBank.publicKey,\n        liabBank: liabBank.publicKey,\n        liquidatorMarginfiAccount: this.publicKey,\n        liquidateeMarginfiAccount: liquidateeMarginfiAccount.publicKey,\n      },\n      { assetAmount: uiToNative(assetQuantityUi, assetBank.mintDecimals) },\n      [\n        {\n          pubkey: assetBank.config.oracleKeys[0],\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: liabBank.config.oracleKeys[0],\n          isSigner: false,\n          isWritable: false,\n        },\n        ...this.getHealthCheckAccounts([assetBank, liabBank]),\n        ...liquidateeMarginfiAccount.getHealthCheckAccounts(),\n      ]\n    );\n\n    return { instructions: [ix], keys: [] };\n  }\n\n  public async lendingAccountLiquidate(\n    liquidateeMarginfiAccount: MarginfiAccount,\n    assetBank: Bank,\n    assetQuantityUi: Amount,\n    liabBank: Bank\n  ): Promise<string> {\n    const ixw = await this.makeLendingAccountLiquidateIx(\n      liquidateeMarginfiAccount,\n      assetBank,\n      assetQuantityUi,\n      liabBank\n    );\n    const tx = new Transaction().add(...ixw.instructions, ComputeBudgetProgram.setComputeUnitLimit({ units: 600_000 }));\n    return this.client.processTransaction(tx);\n  }\n\n  public toString() {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Equity);\n\n    let str = `-----------------\n  Marginfi account:\n    Address: ${this.publicKey.toBase58()}\n    Group: ${this.group.publicKey.toBase58()}\n    Authority: ${this.authority.toBase58()}\n    Equity: ${this.getHealthComponents(MarginRequirementType.Equity).assets.toFixed(6)}\n    Equity: ${assets.minus(liabilities).toFixed(6)}\n    Assets: ${assets.toFixed(6)},\n    Liabilities: ${liabilities.toFixed(6)}`;\n\n    const activeLendingAccounts = this.activeBalances.filter((la) => la.active);\n    if (activeLendingAccounts.length > 0) {\n      str = str.concat(\"\\n-----------------\\nBalances:\");\n    }\n    for (let lendingAccount of activeLendingAccounts) {\n      const bank = this._group.getBankByPk(lendingAccount.bankPk);\n      if (!bank) {\n        console.log(`Bank ${lendingAccount.bankPk} not found`);\n        continue;\n      }\n      const utpStr = `\\n  Bank ${bank.label}:\n      Address: ${bank.publicKey.toBase58()}\n      Mint: ${bank.mint.toBase58()}\n      Equity: ${lendingAccount.getUsdValue(bank, MarginRequirementType.Equity)}`;\n      str = str.concat(utpStr);\n    }\n\n    return str;\n  }\n\n  // Calculate the max amount of collateral to liquidate to bring an account maint health to 0 (assuming negative health).\n  //\n  // The asset amount is bounded by 2 constraints,\n  // (1) the amount of liquidated collateral cannot be more than the balance,\n  // (2) the amount of covered liablity cannot be more than existing liablity.\n  public getMaxLiquidatableAssetAmount(assetBank: Bank, liabBank: Bank): BigNumber {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Maint);\n    const currentHealth = assets.minus(liabilities);\n\n    const priceAssetLower = assetBank.getPrice(PriceBias.Lowest);\n    const priceAssetMarket = assetBank.getPrice(PriceBias.None);\n    const assetMaintWeight = assetBank.config.assetWeightMaint;\n\n    const liquidationDiscount = new BigNumber(1 - 0.05);\n\n    const priceLiabHighest = liabBank.getPrice(PriceBias.Highest);\n    const priceLiabMarket = liabBank.getPrice(PriceBias.None);\n    const liabMaintWeight = liabBank.config.liabilityWeightMaint;\n\n    // MAX amount of asset to liquidate to bring account maint health to 0, regardless of existing balances\n    const maxLiquidatableUnboundedAssetAmount = currentHealth.div(\n      priceAssetLower\n        .times(assetMaintWeight)\n        .minus(\n          priceAssetMarket\n            .times(liquidationDiscount)\n            .times(priceLiabHighest)\n            .times(liabMaintWeight)\n            .div(priceLiabMarket)\n        )\n    );\n\n    // MAX asset amount bounded by available asset amount\n    const assetBalanceBound = this.getBalance(assetBank.publicKey).getQuantityUi(assetBank).assets;\n\n    const liabBalance = this.getBalance(liabBank.publicKey).getQuantityUi(liabBank).liabilities;\n    // MAX asset amount bounded by availalbe liability amount\n    const liabBalanceBound = liabBalance.times(priceLiabMarket).div(priceAssetMarket.times(liquidationDiscount));\n\n    return BigNumber.min(assetBalanceBound, liabBalanceBound, maxLiquidatableUnboundedAssetAmount);\n  }\n\n  public describe(): string {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Equity);\n    return `\n- Marginfi account: ${this.publicKey}\n- Total deposits: $${assets.toFixed(6)}\n- Total liabilities: $${liabilities.toFixed(6)}\n- Equity: $${assets.minus(liabilities).toFixed(6)}\n- Health: ${assets.minus(liabilities).div(assets).times(100).toFixed(2)}%\n- Balances:  ${this.activeBalances.map((la) => {\n      const bank = this._group.getBankByPk(la.bankPk)!;\n      return la.describe(bank);\n    })}`;\n  }\n\n  private async wrapInstructionForWSol(\n    ix: TransactionInstruction,\n    amount: Amount = new BigNumber(0)\n  ): Promise<TransactionInstruction[]> {\n    return [...(await this.makeWrapSolIxs(new BigNumber(amount))), ix, await this.makeUnwrapSolIx()];\n  }\n\n  private async makeWrapSolIxs(amount: BigNumber): Promise<TransactionInstruction[]> {\n    const address = await associatedAddress({ mint: NATIVE_MINT, owner: this.client.wallet.publicKey });\n    const ixs = [\n      createAssociatedTokenAccountIdempotentInstruction(\n        this.client.wallet.publicKey,\n        address,\n        this.client.wallet.publicKey,\n        NATIVE_MINT\n      ),\n    ];\n\n    if (amount.gt(0)) {\n      const nativeAmount = uiToNative(amount, 9).toNumber() + 10000;\n\n      ixs.push(\n        SystemProgram.transfer({ fromPubkey: this.client.wallet.publicKey, toPubkey: address, lamports: nativeAmount }),\n        createSyncNativeInstruction(address)\n      );\n    }\n\n    return ixs;\n  }\n\n  private async makeUnwrapSolIx(): Promise<TransactionInstruction> {\n    const address = await associatedAddress({ mint: NATIVE_MINT, owner: this.client.wallet.publicKey });\n\n    return createCloseAccountInstruction(address, this.client.wallet.publicKey, this.client.wallet.publicKey);\n  }\n}\n\nexport default MarginfiAccount;\n\n// Client types\n\nexport class Balance {\n  active: boolean;\n  bankPk: PublicKey;\n  assetShares: BigNumber;\n  liabilityShares: BigNumber;\n  private emissionsOutstanding: BigNumber;\n  lastUpdate: number;\n\n  constructor(data: BalanceData) {\n    this.active = data.active;\n    this.bankPk = data.bankPk;\n    this.assetShares = wrappedI80F48toBigNumber(data.assetShares);\n    this.liabilityShares = wrappedI80F48toBigNumber(data.liabilityShares);\n    this.emissionsOutstanding = wrappedI80F48toBigNumber(data.emissionsOutstanding);\n    this.lastUpdate = data.lastUpdate;\n  }\n\n  public static newEmpty(bankPk: PublicKey): Balance {\n    return new Balance({\n      active: false,\n      bankPk,\n      assetShares: { value: new BN(0) },\n      liabilityShares: { value: new BN(0) },\n      emissionsOutstanding: { value: new BN(0) },\n      lastUpdate: 0,\n    });\n  }\n\n  public getUsdValue(\n    bank: Bank,\n    marginReqType: MarginRequirementType = MarginRequirementType.Equity\n  ): { assets: BigNumber; liabilities: BigNumber } {\n    return {\n      assets: bank.getAssetUsdValue(this.assetShares, marginReqType, PriceBias.None),\n      liabilities: bank.getLiabilityUsdValue(this.liabilityShares, marginReqType, PriceBias.None),\n    };\n  }\n\n  public getUsdValueWithPriceBias(\n    bank: Bank,\n    marginReqType: MarginRequirementType\n  ): { assets: BigNumber; liabilities: BigNumber } {\n    return {\n      assets: bank.getAssetUsdValue(this.assetShares, marginReqType, PriceBias.Lowest),\n      liabilities: bank.getLiabilityUsdValue(this.liabilityShares, marginReqType, PriceBias.Highest),\n    };\n  }\n\n  public getQuantity(bank: Bank): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    return {\n      assets: bank.getAssetQuantity(this.assetShares),\n      liabilities: bank.getLiabilityQuantity(this.liabilityShares),\n    };\n  }\n\n  public getQuantityUi(bank: Bank): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    return {\n      assets: new BigNumber(nativeToUi(bank.getAssetQuantity(this.assetShares), bank.mintDecimals)),\n      liabilities: new BigNumber(nativeToUi(bank.getLiabilityQuantity(this.liabilityShares), bank.mintDecimals)),\n    };\n  }\n\n  public getTotalOutstandingEmissions(bank: Bank): BigNumber {\n    const claimedEmissions = this.emissionsOutstanding;\n\n    const unclaimedEmissions = this.calcClaimedEmissions(bank, Date.now() / 1000);\n\n    return claimedEmissions.plus(unclaimedEmissions);\n  }\n\n  private calcClaimedEmissions(bank: Bank, currentTimestamp: number): BigNumber {\n    const lendingActive = bank.emissionsActiveLending;\n    const borrowActive = bank.emissionsActiveBorrowing;\n\n    const { assets, liabilities } = this.getQuantity(bank);\n\n    let balanceAmount: BigNumber | null = null;\n\n    if (lendingActive) {\n      balanceAmount = assets;\n    } else if (borrowActive) {\n      balanceAmount = liabilities;\n    }\n\n    if (balanceAmount) {\n      const lastUpdate = this.lastUpdate;\n      const period = new BigNumber(currentTimestamp - lastUpdate);\n      const emissionsRate = new BigNumber(bank.emissionsRate);\n      const emissions = period.times(balanceAmount).times(emissionsRate).div(31_536_000_000_000);\n      const emissionsReal = BigNumber.min(emissions, new BigNumber(bank.emissionsRemaining));\n\n      return emissionsReal;\n    }\n\n    return new BigNumber(0);\n  }\n\n  public describe(bank: Bank): string {\n    let { assets: assetsQt, liabilities: liabsQt } = this.getQuantityUi(bank);\n    let { assets: assetsUsd, liabilities: liabsUsd } = this.getUsdValue(bank, MarginRequirementType.Equity);\n\n    return `\n${bank.label} Balance:\n- Deposits: ${assetsQt.toFixed(5)} (${assetsUsd.toFixed(5)} USD)\n- Borrows: ${liabsQt.toFixed(5)} (${liabsUsd.toFixed(5)} USD)\n`;\n  }\n}\n\n// On-chain types\n\nexport interface MarginfiAccountData {\n  group: PublicKey;\n  authority: PublicKey;\n  lendingAccount: { balances: BalanceData[] };\n}\n\nexport interface BalanceData {\n  active: boolean;\n  bankPk: PublicKey;\n  assetShares: WrappedI80F48;\n  liabilityShares: WrappedI80F48;\n  emissionsOutstanding: WrappedI80F48;\n  lastUpdate: number;\n}\n\nexport enum MarginRequirementType {\n  Init = 0,\n  Maint = 1,\n  Equity = 2,\n}\n","import { AccountMeta, PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { MarginfiProgram } from \"./types\";\n\nasync function makeInitMarginfiAccountIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    authorityPk: PublicKey;\n    feePayerPk: PublicKey;\n  }\n) {\n  return mfProgram.methods\n    .marginfiAccountInitialize()\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      authority: accounts.authorityPk,\n      systemProgram: SystemProgram.programId,\n      feePayer: accounts.feePayerPk,\n    })\n    .instruction();\n}\n\nasync function makeDepositIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    authorityPk: PublicKey;\n    signerTokenAccountPk: PublicKey;\n    bankPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .lendingAccountDeposit(args.amount)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.authorityPk,\n      signerTokenAccount: accounts.signerTokenAccountPk,\n      bank: accounts.bankPk,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nasync function makeRepayIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    authorityPk: PublicKey;\n    signerTokenAccountPk: PublicKey;\n    bankPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n    repayAll?: boolean;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .lendingAccountRepay(args.amount, args.repayAll ?? null)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.authorityPk,\n      signerTokenAccount: accounts.signerTokenAccountPk,\n      bank: accounts.bankPk,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nasync function makeWithdrawIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    signerPk: PublicKey;\n    bankPk: PublicKey;\n    destinationTokenAccountPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n    withdrawAll?: boolean;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .lendingAccountWithdraw(args.amount, args.withdrawAll ?? null)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.signerPk,\n      destinationTokenAccount: accounts.destinationTokenAccountPk,\n      bank: accounts.bankPk,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nasync function makeBorrowIx(\n  mfProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroupPk: PublicKey;\n    marginfiAccountPk: PublicKey;\n    signerPk: PublicKey;\n    bankPk: PublicKey;\n    destinationTokenAccountPk: PublicKey;\n  },\n  args: {\n    amount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfProgram.methods\n    .lendingAccountBorrow(args.amount)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroupPk,\n      marginfiAccount: accounts.marginfiAccountPk,\n      signer: accounts.signerPk,\n      destinationTokenAccount: accounts.destinationTokenAccountPk,\n      bank: accounts.bankPk,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nfunction makeLendingAccountLiquidateIx(\n  mfiProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroup: PublicKey;\n    signer: PublicKey;\n    assetBank: PublicKey;\n    liabBank: PublicKey;\n    liquidatorMarginfiAccount: PublicKey;\n    liquidateeMarginfiAccount: PublicKey;\n  },\n  args: {\n    assetAmount: BN;\n  },\n  remainingAccounts: AccountMeta[] = []\n) {\n  return mfiProgram.methods\n    .lendingAccountLiquidate(args.assetAmount)\n    .accounts({\n      marginfiGroup: accounts.marginfiGroup,\n      signer: accounts.signer,\n      assetBank: accounts.assetBank,\n      liabBank: accounts.liabBank,\n      liquidatorMarginfiAccount: accounts.liquidatorMarginfiAccount,\n      liquidateeMarginfiAccount: accounts.liquidateeMarginfiAccount,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n}\n\nfunction makelendingAccountWithdrawEmissionIx(\n  mfiProgram: MarginfiProgram,\n  accounts: {\n    marginfiGroup: PublicKey;\n    marginfiAccount: PublicKey;\n    signer: PublicKey;\n    destinationTokenAccount: PublicKey;\n    bank: PublicKey;\n    emissionsMint: PublicKey;\n  }\n) {\n  return mfiProgram.methods\n    .lendingAccountWithdrawEmissions()\n    .accounts({\n      marginfiGroup: accounts.marginfiGroup,\n      marginfiAccount: accounts.marginfiAccount,\n      signer: accounts.signer,\n      destinationAccount: accounts.destinationTokenAccount,\n      bank: accounts.bank,\n      emissionsMint: accounts.emissionsMint,\n    })\n    .instruction();\n}\n\nconst instructions = {\n  makeDepositIx,\n  makeRepayIx,\n  makeWithdrawIx,\n  makeBorrowIx,\n  makeInitMarginfiAccountIx,\n  makeLendingAccountLiquidateIx,\n  makelendingAccountWithdrawEmissionIx,\n};\n\nexport default instructions;\n","import BigNumber from \"bignumber.js\";\n\nexport const PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED = Buffer.from(\"liquidity_vault_auth\");\nexport const PDA_BANK_INSURANCE_VAULT_AUTH_SEED = Buffer.from(\"insurance_vault_auth\");\nexport const PDA_BANK_FEE_VAULT_AUTH_SEED = Buffer.from(\"fee_vault_auth\");\n\nexport const PDA_BANK_LIQUIDITY_VAULT_SEED = Buffer.from(\"liquidity_vault\");\nexport const PDA_BANK_INSURANCE_VAULT_SEED = Buffer.from(\"insurance_vault\");\nexport const PDA_BANK_FEE_VAULT_SEED = Buffer.from(\"fee_vault\");\n\nexport const PYTH_PRICE_CONF_INTERVALS = new BigNumber(2.12);\nexport const SWB_PRICE_CONF_INTERVALS = new BigNumber(2.12);\nexport const USDC_DECIMALS = 6;\n","import { Address, AnchorProvider, BorshAccountsCoder, Program, translateAddress } from \"@project-serum/anchor\";\nimport { bs58 } from \"@project-serum/anchor/dist/cjs/utils/bytes\";\nimport { ConfirmOptions, Connection, PublicKey } from \"@solana/web3.js\";\nimport { AccountType, Environment, MarginfiConfig, MarginfiProgram } from \"./types\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { getConfig } from \"./config\";\nimport MarginfiGroup from \"./group\";\nimport { MarginfiAccountData } from \"./account\";\nimport MarginfiAccountReadonly from \"./accountReadonly\";\nimport { DEFAULT_COMMITMENT } from \"@mrgnlabs/mrgn-common\";\n\n/**\n * Entrypoint to interact with the marginfi contract.\n */\nclass MarginfiClientReadonly {\n  public readonly programId: PublicKey;\n  private _group: MarginfiGroup;\n\n  /**\n   * @internal\n   */\n  private constructor(readonly config: MarginfiConfig, readonly program: MarginfiProgram, group: MarginfiGroup) {\n    this.programId = config.programId;\n    this._group = group;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiClient factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param config marginfi config\n   * @param connection Solana web.js Connection object\n   * @param opts Solana web.js ConfirmOptions object\n   * @returns MarginfiClient instance\n   */\n  static async fetch(config: MarginfiConfig, connection: Connection, opts?: ConfirmOptions) {\n    const provider = new AnchorProvider(connection, {} as any, {\n      ...AnchorProvider.defaultOptions(),\n      commitment: connection.commitment ?? AnchorProvider.defaultOptions().commitment,\n      ...opts,\n    });\n\n    const program = new Program(MARGINFI_IDL, config.programId, provider) as any as MarginfiProgram;\n    return new MarginfiClientReadonly(config, program, await MarginfiGroup.fetch(config, program, opts?.commitment));\n  }\n\n  static async fromEnv(\n    overrides?: Partial<{\n      env: Environment;\n      connection: Connection;\n      programId: Address;\n      marginfiGroup: Address;\n    }>\n  ): Promise<MarginfiClientReadonly> {\n    const env = overrides?.env ?? (process.env.MARGINFI_ENV! as Environment);\n    const connection =\n      overrides?.connection ??\n      new Connection(process.env.MARGINFI_RPC_ENDPOINT!, {\n        commitment: DEFAULT_COMMITMENT,\n      });\n    const programId = overrides?.programId ?? new PublicKey(process.env.MARGINFI_PROGRAM!);\n    const groupPk =\n      overrides?.marginfiGroup ??\n      (process.env.MARGINFI_GROUP ? new PublicKey(process.env.MARGINFI_GROUP) : PublicKey.default);\n\n    const config = await getConfig(env, {\n      groupPk: translateAddress(groupPk),\n      programId: translateAddress(programId),\n    });\n\n    return MarginfiClientReadonly.fetch(config, connection, {\n      commitment: connection.commitment,\n    });\n  }\n\n  // --- Getters and setters\n\n  /**\n   * Marginfi account group address\n   */\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  get provider(): AnchorProvider {\n    return this.program.provider as AnchorProvider;\n  }\n\n  // --- Others\n\n  /**\n   * Retrieves the addresses of all marginfi accounts in the udnerlying group.\n   *\n   * @returns Account addresses\n   */\n  async getAllMarginfiAccountAddresses(): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(this.programId, {\n        commitment: this.program.provider.connection.commitment,\n        dataSlice: {\n          offset: 0,\n          length: 0,\n        },\n        filters: [\n          {\n            memcmp: {\n              bytes: this._group.publicKey.toBase58(),\n              offset: 8 + 32, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n            },\n          },\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(BorshAccountsCoder.accountDiscriminator(AccountType.MarginfiAccount)),\n            },\n          },\n        ],\n      })\n    ).map((a) => a.pubkey);\n  }\n\n  /**\n   * Retrieves all marginfi accounts under the specified authority.\n   *\n   * @returns MarginfiAccount instances\n   */\n  async getMarginfiAccountsForAuthority(authority: Address): Promise<MarginfiAccountReadonly[]> {\n    const marginfiGroup = await MarginfiGroup.fetch(this.config, this.program);\n    const _authority = translateAddress(authority);\n    return (\n      await this.program.account.marginfiAccount.all([\n        {\n          memcmp: {\n            bytes: _authority.toBase58(),\n            offset: 8, // authority is the first field in the account, so only offset is the discriminant\n          },\n        },\n        {\n          memcmp: {\n            bytes: this._group.publicKey.toBase58(),\n            offset: 8 + 32, // marginfiGroup is the second field in the account after the authority, so offset by the discriminant and a pubkey\n          },\n        },\n      ])\n    ).map((a) =>\n      MarginfiAccountReadonly.fromAccountData(a.publicKey, this, a.account as MarginfiAccountData, marginfiGroup)\n    );\n  }\n\n  /**\n   * Retrieves the addresses of all accounts owned by the marginfi program.\n   *\n   * @returns Account addresses\n   */\n  async getAllProgramAccountAddresses(type: AccountType): Promise<PublicKey[]> {\n    return (\n      await this.program.provider.connection.getProgramAccounts(this.programId, {\n        commitment: this.program.provider.connection.commitment,\n        dataSlice: {\n          offset: 0,\n          length: 0,\n        },\n        filters: [\n          {\n            memcmp: {\n              offset: 0,\n              bytes: bs58.encode(BorshAccountsCoder.accountDiscriminator(type)),\n            },\n          },\n        ],\n      })\n    ).map((a) => a.pubkey);\n  }\n}\n\nexport default MarginfiClientReadonly;\n","import { Address, BorshCoder, translateAddress } from \"@project-serum/anchor\";\nimport { parsePriceData } from \"@pythnetwork/client\";\nimport { AccountInfo, Cluster, Commitment, PublicKey } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { Balance, MarginfiAccountData, MarginRequirementType } from \"./account\";\nimport { Bank, BankData, getOraclePriceData } from \"./bank\";\nimport MarginfiClientReadonly from \"./clientReadonly\";\nimport MarginfiGroup from \"./group\";\nimport { MARGINFI_IDL } from \"./idl\";\nimport { AccountType, MarginfiConfig, MarginfiProgram } from \"./types\";\nimport { DEFAULT_COMMITMENT, shortenAddress } from \"@mrgnlabs/mrgn-common\";\n\n/**\n * Wrapper class around a specific marginfi account.\n */\nclass MarginfiAccountReadonly {\n  public readonly publicKey: PublicKey;\n\n  private _group: MarginfiGroup;\n  private _authority: PublicKey;\n  private _lendingAccount: Balance[];\n\n  /**\n   * @internal\n   */\n  private constructor(\n    marginfiAccountPk: PublicKey,\n    readonly client: MarginfiClientReadonly,\n    group: MarginfiGroup,\n    rawData: MarginfiAccountData\n  ) {\n    this.publicKey = marginfiAccountPk;\n\n    this._group = group;\n    this._authority = rawData.authority;\n\n    this._lendingAccount = rawData.lendingAccount.balances.map((la) => new Balance(la));\n  }\n\n  // --- Getters / Setters\n\n  /**\n   * Marginfi account authority address\n   */\n  get authority(): PublicKey {\n    return this._authority;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  get activeBalances(): Balance[] {\n    return this._lendingAccount.filter((la) => la.active);\n  }\n\n  get group(): MarginfiGroup {\n    return this._group;\n  }\n\n  /**\n   * Marginfi group address\n   */\n  /** @internal */\n  private get _program() {\n    return this.client.program;\n  }\n\n  /** @internal */\n  private get _config() {\n    return this.client.config;\n  }\n\n  // --- Factories\n\n  /**\n   * MarginfiAccount network factory\n   *\n   * Fetch account data according to the config and instantiate the corresponding MarginfiAccount.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param commitment Commitment level override\n   * @returns MarginfiAccount instance\n   */\n  static async fetch(\n    marginfiAccountPk: Address,\n    client: MarginfiClientReadonly,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountReadonly> {\n    const { config, program } = client;\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    const accountData = await MarginfiAccountReadonly._fetchAccountData(\n      _marginfiAccountPk,\n      config,\n      program,\n      commitment\n    );\n\n    const marginfiAccount = new MarginfiAccountReadonly(\n      _marginfiAccountPk,\n      client,\n      await MarginfiGroup.fetch(config, program, commitment),\n      accountData\n    );\n\n    return marginfiAccount;\n  }\n\n  /**\n   * MarginfiAccount local factory (decoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided decoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param accountData Decoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountData(\n    marginfiAccountPk: Address,\n    client: MarginfiClientReadonly,\n    accountData: MarginfiAccountData,\n    marginfiGroup: MarginfiGroup\n  ) {\n    if (!accountData.group.equals(client.config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${accountData.group.toBase58()}. Expected: ${client.config.groupPk.toBase58()}`\n      );\n\n    const _marginfiAccountPk = translateAddress(marginfiAccountPk);\n\n    return new MarginfiAccountReadonly(_marginfiAccountPk, client, marginfiGroup, accountData);\n  }\n\n  /**\n   * MarginfiAccount local factory (encoded)\n   *\n   * Instantiate a MarginfiAccount according to the provided encoded data.\n   * Check sanity against provided config.\n   *\n   * @param marginfiAccountPk Address of the target account\n   * @param client marginfi client\n   * @param marginfiAccountRawData Encoded marginfi marginfi account data\n   * @param marginfiGroup MarginfiGroup instance\n   * @returns MarginfiAccount instance\n   */\n  static fromAccountDataRaw(\n    marginfiAccountPk: PublicKey,\n    client: MarginfiClientReadonly,\n    marginfiAccountRawData: Buffer,\n    marginfiGroup: MarginfiGroup\n  ) {\n    const marginfiAccountData = MarginfiAccountReadonly.decode(marginfiAccountRawData);\n\n    return MarginfiAccountReadonly.fromAccountData(marginfiAccountPk, client, marginfiAccountData, marginfiGroup);\n  }\n\n  // --- Others\n\n  /**\n   * Fetch marginfi account data.\n   * Check sanity against provided config.\n   *\n   * @param accountAddress accountAddress Address of the target account\n   * @param config marginfi config\n   * @param program marginfi Anchor program\n   * @param commitment Commitment level override\n   * @returns Decoded marginfi account data struct\n   */\n  private static async _fetchAccountData(\n    accountAddress: Address,\n    config: MarginfiConfig,\n    program: MarginfiProgram,\n    commitment?: Commitment\n  ): Promise<MarginfiAccountData> {\n    const mergedCommitment = commitment ?? program.provider.connection.commitment ?? DEFAULT_COMMITMENT;\n\n    const data: MarginfiAccountData = (await program.account.marginfiAccount.fetch(\n      accountAddress,\n      mergedCommitment\n    )) as any;\n\n    if (!data.group.equals(config.groupPk))\n      throw Error(`Marginfi account tied to group ${data.group.toBase58()}. Expected: ${config.groupPk.toBase58()}`);\n\n    return data;\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param encoded Raw data buffer\n   * @returns Decoded marginfi account data struct\n   */\n  static decode(encoded: Buffer): MarginfiAccountData {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return coder.accounts.decode(AccountType.MarginfiAccount, encoded);\n  }\n\n  /**\n   * Decode marginfi account data according to the Anchor IDL.\n   *\n   * @param decoded Marginfi account data struct\n   * @returns Raw data buffer\n   */\n  static async encode(decoded: MarginfiAccountData): Promise<Buffer> {\n    const coder = new BorshCoder(MARGINFI_IDL);\n    return await coder.accounts.encode(AccountType.MarginfiAccount, decoded);\n  }\n\n  /**\n   * Update instance data by fetching and storing the latest on-chain state.\n   */\n  async reload() {\n    const [marginfiGroupAi, marginfiAccountAi] = await this.loadGroupAndAccountAi();\n    const marginfiAccountData = MarginfiAccountReadonly.decode(marginfiAccountAi.data);\n    if (!marginfiAccountData.group.equals(this._config.groupPk))\n      throw Error(\n        `Marginfi account tied to group ${marginfiAccountData.group.toBase58()}. Expected: ${this._config.groupPk.toBase58()}`\n      );\n\n    const bankAccountsData = await this._program.account.bank.all([\n      { memcmp: { offset: 8 + 32 + 1, bytes: this._config.groupPk.toBase58() } },\n    ]);\n\n    const banks = await Promise.all(\n      bankAccountsData.map(async (accountData) => {\n        let bankData = accountData.account as any as BankData;\n        return new Bank(\n          this._config.banks.find((b) => b.address.equals(accountData.publicKey))?.label || \"Unknown\",\n          accountData.publicKey,\n          bankData,\n          await getOraclePriceData(\n            this._program.provider.connection,\n            bankData.config.oracleSetup,\n            bankData.config.oracleKeys\n          )\n        );\n      })\n    );\n    this._group = MarginfiGroup.fromAccountDataRaw(this._config, this._program, marginfiGroupAi.data, banks);\n    this._updateFromAccountData(marginfiAccountData);\n  }\n\n  /**\n   * Update instance data from provided data struct.\n   *\n   * @param data Marginfi account data struct\n   */\n  private _updateFromAccountData(data: MarginfiAccountData) {\n    this._authority = data.authority;\n\n    this._lendingAccount = data.lendingAccount.balances.map((la) => new Balance(la));\n  }\n\n  private async loadGroupAndAccountAi(): Promise<AccountInfo<Buffer>[]> {\n    let [marginfiGroupAi, marginfiAccountAi] = await this.client.provider.connection.getMultipleAccountsInfo(\n      [this._config.groupPk, this.publicKey],\n      DEFAULT_COMMITMENT\n    );\n\n    if (!marginfiAccountAi) {\n      throw Error(\"Marginfi account no found\");\n    }\n    if (!marginfiGroupAi) {\n      throw Error(\"Marginfi Group Account no found\");\n    }\n\n    return [marginfiGroupAi, marginfiAccountAi];\n  }\n\n  public getHealthComponents(marginReqType: MarginRequirementType): {\n    assets: BigNumber;\n    liabilities: BigNumber;\n  } {\n    const [assets, liabilities] = this.activeBalances\n      .map((accountBalance) => {\n        const bank = this._group.banks.get(accountBalance.bankPk.toBase58());\n        if (!bank) throw Error(`Bank ${shortenAddress(accountBalance.bankPk)} not found`);\n        const { assets, liabilities } = accountBalance.getUsdValueWithPriceBias(bank, marginReqType);\n        return [assets, liabilities];\n      })\n      .reduce(\n        ([asset, liability], [d, l]) => {\n          return [asset.plus(d), liability.plus(l)];\n        },\n        [new BigNumber(0), new BigNumber(0)]\n      );\n\n    return { assets, liabilities };\n  }\n\n  public canBeLiquidated(): boolean {\n    const { assets, liabilities } = this.getHealthComponents(MarginRequirementType.Maint);\n\n    return assets < liabilities;\n  }\n\n  // Calculate the max withdraw of a lending account balance.\n  // max_withdraw = max(free_collateral, balance_deposit) + max(free_collateral - balance_deposit, 0) / balance_liab_weight\n  public getMaxWithdrawForBank(_bank: Bank): BigNumber {\n    // TODO\n\n    return new BigNumber(0);\n  }\n}\n\nexport default MarginfiAccountReadonly;\n","import { PublicKey } from \"@solana/web3.js\";\nimport {\n  PDA_BANK_FEE_VAULT_AUTH_SEED,\n  PDA_BANK_FEE_VAULT_SEED,\n  PDA_BANK_INSURANCE_VAULT_AUTH_SEED,\n  PDA_BANK_INSURANCE_VAULT_SEED,\n  PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED,\n  PDA_BANK_LIQUIDITY_VAULT_SEED,\n} from \"./constants\";\nimport { BankVaultType } from \"./types\";\n\nexport function getBankVaultSeeds(type: BankVaultType): Buffer {\n  switch (type) {\n    case BankVaultType.LiquidityVault:\n      return PDA_BANK_LIQUIDITY_VAULT_SEED;\n    case BankVaultType.InsuranceVault:\n      return PDA_BANK_INSURANCE_VAULT_SEED;\n    case BankVaultType.FeeVault:\n      return PDA_BANK_FEE_VAULT_SEED;\n    default:\n      throw Error(`Unknown vault type ${type}`);\n  }\n}\n\nfunction getBankVaultAuthoritySeeds(type: BankVaultType): Buffer {\n  switch (type) {\n    case BankVaultType.LiquidityVault:\n      return PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED;\n    case BankVaultType.InsuranceVault:\n      return PDA_BANK_INSURANCE_VAULT_AUTH_SEED;\n    case BankVaultType.FeeVault:\n      return PDA_BANK_FEE_VAULT_AUTH_SEED;\n    default:\n      throw Error(`Unknown vault type ${type}`);\n  }\n}\n\n/**\n * Compute authority PDA for a specific marginfi group bank vault\n */\nexport function getBankVaultAuthority(\n  bankVaultType: BankVaultType,\n  bankPk: PublicKey,\n  programId: PublicKey\n): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync([getBankVaultAuthoritySeeds(bankVaultType), bankPk.toBuffer()], programId);\n}\n"]}