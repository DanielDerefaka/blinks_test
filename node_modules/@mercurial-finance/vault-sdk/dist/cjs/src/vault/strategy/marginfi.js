"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const bn_js_1 = __importDefault(require("bn.js"));
const constants_1 = require("../constants");
const marginfi_client_v2_1 = require("@mercurial-finance/marginfi-client-v2");
const utils_1 = require("../utils");
class MarginFiHandler {
    constructor(program) {
        this.connection = program.provider.connection;
    }
    withdraw(walletPubKey, program, strategy, vault, tokenVault, vaultState, userToken, userLp, amount, preInstructions, postInstructions, opt) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!walletPubKey)
                throw new Error('No user wallet public key');
            const marginfiClient = yield marginfi_client_v2_1.MarginfiClient.fetch((0, marginfi_client_v2_1.getConfig)(), {}, this.connection);
            const strategyBuffer = strategy.pubkey.toBuffer();
            const [marginfiPda] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.MARGINFI_ACCOUNT), strategyBuffer], program.programId);
            const marginfiAccount = yield marginfi_client_v2_1.MarginfiAccount.fetch(marginfiPda, marginfiClient);
            const group = marginfiAccount.group;
            const bank = group.getBankByMint(vaultState.tokenMint);
            if (!bank)
                throw new Error('No bank found');
            const [collateralVault] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.COLLATERAL_VAULT_PREFIX), strategyBuffer], program.programId);
            const [strategyOwner] = web3_js_1.PublicKey.findProgramAddressSync([Buffer.from(constants_1.SEEDS.MARGINFI_STRATEGY), strategyBuffer], program.programId);
            const [tokenAccount, createTokenAccountIx] = yield (0, utils_1.getOrCreateATAInstruction)(vaultState.tokenMint, strategyOwner, this.connection, {
                payer: walletPubKey,
            });
            createTokenAccountIx && preInstructions.push(createTokenAccountIx);
            const strategyReserveBuffer = strategy.state.reserve.toBuffer();
            const [bankLiquidityVault] = web3_js_1.PublicKey.findProgramAddressSync([marginfi_client_v2_1.PDA_BANK_LIQUIDITY_VAULT_SEED, strategyReserveBuffer], marginfiClient.programId);
            const [bankLiquidityVaultAuth] = web3_js_1.PublicKey.findProgramAddressSync([marginfi_client_v2_1.PDA_BANK_LIQUIDITY_VAULT_AUTH_SEED, strategyReserveBuffer], marginfiClient.programId);
            const observationAccounts = marginfiAccount.getHealthCheckAccounts([bank]);
            const accounts = [
                { pubkey: strategyOwner, isWritable: true },
                { pubkey: bank.group, isWritable: true },
                { pubkey: marginfiAccount.publicKey, isWritable: true },
                { pubkey: tokenAccount, isWritable: true },
                { pubkey: bankLiquidityVault, isWritable: true },
                { pubkey: bankLiquidityVaultAuth, isWritable: true },
                ...observationAccounts,
            ];
            const remainingAccounts = [];
            for (const account of accounts) {
                remainingAccounts.push({
                    pubkey: account.pubkey,
                    isWritable: account.isWritable,
                    isSigner: false,
                });
            }
            // Do not remove: to resolve limit of computation and log
            const additionalComputeBudgetInstruction = web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
                units: 800000,
            });
            preInstructions.push(additionalComputeBudgetInstruction);
            const txAccounts = {
                vault,
                strategy: new web3_js_1.PublicKey(strategy.pubkey),
                reserve: new web3_js_1.PublicKey(strategy.state.reserve),
                strategyProgram: marginfiClient.programId,
                collateralVault,
                feeVault: vaultState.feeVault,
                tokenVault,
                userToken,
                userLp,
                tokenProgram: spl_token_1.TOKEN_PROGRAM_ID,
            };
            if (opt === null || opt === void 0 ? void 0 : opt.affiliate) {
                const tx = yield opt.affiliate.affiliateProgram.methods
                    .withdrawDirectlyFromStrategy(new bn_js_1.default(amount), new bn_js_1.default(0))
                    .accounts(Object.assign(Object.assign({}, txAccounts), { partner: opt.affiliate.partner, user: opt.affiliate.user, vaultProgram: program.programId, vaultLpMint: vaultState.lpMint, owner: walletPubKey }))
                    .remainingAccounts(remainingAccounts)
                    .preInstructions(preInstructions)
                    .postInstructions(postInstructions)
                    .transaction();
                return tx;
            }
            const tx = yield program.methods
                .withdrawDirectlyFromStrategy(new bn_js_1.default(amount), new bn_js_1.default(0))
                .accounts(Object.assign(Object.assign({}, txAccounts), { lpMint: vaultState.lpMint, user: walletPubKey }))
                .remainingAccounts(remainingAccounts)
                .preInstructions(preInstructions)
                .postInstructions(postInstructions)
                .transaction();
            return tx;
        });
    }
}
exports.default = MarginFiHandler;
//# sourceMappingURL=marginfi.js.map