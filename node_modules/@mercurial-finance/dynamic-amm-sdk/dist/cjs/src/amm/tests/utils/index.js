"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockWallet = exports.getOrCreateATA = exports.airDropSolIfBalanceNotEnough = exports.airDropSol = void 0;
const anchor_1 = require("@project-serum/anchor");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const airDropSol = (connection, publicKey, amount = 1) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const airdropSignature = yield connection.requestAirdrop(publicKey, amount * web3_js_1.LAMPORTS_PER_SOL);
        const latestBlockHash = yield connection.getLatestBlockhash();
        yield connection.confirmTransaction({
            blockhash: latestBlockHash.blockhash,
            lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,
            signature: airdropSignature,
        }, connection.commitment);
    }
    catch (error) {
        console.error(error);
        throw error;
    }
});
exports.airDropSol = airDropSol;
const airDropSolIfBalanceNotEnough = (connection, publicKey, balance = 1) => __awaiter(void 0, void 0, void 0, function* () {
    const walletBalance = yield connection.getBalance(publicKey);
    if (walletBalance < balance * web3_js_1.LAMPORTS_PER_SOL) {
        yield (0, exports.airDropSol)(connection, publicKey);
    }
});
exports.airDropSolIfBalanceNotEnough = airDropSolIfBalanceNotEnough;
const getOrCreateATA = (connection, mint, owner, payer) => __awaiter(void 0, void 0, void 0, function* () {
    const token = new spl_token_1.Token(connection, mint, spl_token_1.TOKEN_PROGRAM_ID, payer);
    const ata = yield token.getOrCreateAssociatedAccountInfo(owner);
    return ata.address;
});
exports.getOrCreateATA = getOrCreateATA;
exports.mockWallet = new anchor_1.Wallet(web3_js_1.Keypair.generate());
// export const MAINNET = {
//   connection: new Connection(process.env.MAINNET_RPC_ENDPOINT as string),
//   cluster: 'mainnet-beta',
// };
// export const DEVNET = {
//   connection: new Connection('https://api.devnet.solana.com/', {
//     commitment: 'confirmed',
//   }),
//   cluster: 'devnet',
// };
//# sourceMappingURL=index.js.map